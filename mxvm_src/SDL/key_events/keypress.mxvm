program KeyTest {
    section module { sdl, string, io }
    section object { SDLCore, Text, Input, Game }
    section code {
    start:
        call Game.init
        call Game.loop
        call Game.cleanup
        done
    }
}

object SDLCore {
    section module { sdl, io }
    section data {
        export string title = "MXVM Key Test"
        export int x = 100
        export int y = 100
        export int w = 800
        export int h = 600
        export int flags = 0
        export int window_id = 0
        export int renderer_id = 0
        export int last_event_type = 0
        export int last_key_code = 0
        export int last_mouse_btn = 0
        export int last_mouse_x = 0
        export int last_mouse_y = 0
    }
    section code {
    function init:
        invoke init
        invoke create_window, title, x, y, w, h, flags
        return window_id
        invoke create_renderer, window_id, -1, 0
        return renderer_id
        ret
    function shutdown:
        invoke destroy_renderer, renderer_id
        invoke destroy_window, window_id
        ret
    function begin_frame:
        invoke set_draw_color, renderer_id, 255, 255, 255, 255
        invoke fill_rect, renderer_id, 0, 0, w, h
        ret
    function end_frame:
        invoke present, renderer_id
        ret
    function poll_one_event:
        invoke poll_event
        return last_event_type
        cmp last_event_type, 0
        je pe_ret
        invoke get_event_type
        return last_event_type
        cmp last_event_type, 768
        je pe_key
        cmp last_event_type, 769
        je pe_key
        cmp last_event_type, 256
        je pe_ret
        cmp last_event_type, 1025
        je pe_mouse
        cmp last_event_type, 1026
        je pe_mouse
        jmp pe_ret
    pe_key:
        invoke get_key_code
        return last_key_code
        jmp pe_ret
    pe_mouse:
        invoke get_mouse_button
        return last_mouse_btn
        invoke get_mouse_x
        return last_mouse_x
        invoke get_mouse_y
        return last_mouse_y
        jmp pe_ret
    pe_ret:
        ret
    }
}

object Text {

    section object { SDLCore, Input }

    section data {
        export int fnt = -1
        export string font_name = "font.ttf"
        export string prefix = "User pressed Key:"
        export string key_buf, 32
        export string key_fmt = "%lld"
        int px = 20
        int py = 20
        int kx = 280
        int ky = 20
    }
    section code {
    function init:
        invoke init_text
        invoke load_font, font_name, 24
        return fnt
        ret
    function release:
        invoke quit_text
        ret
    function draw:
        invoke draw_text, SDLCore.renderer_id, fnt, prefix, px, py, 0, 0, 0, 255
        invoke snprintf, key_buf, 31, key_fmt, Input.last_key
        invoke draw_text, SDLCore.renderer_id, fnt, key_buf, kx, ky, 0, 0, 0, 255
        ret
    }
}

object Input {

    section object { SDLCore, Game }

    section data {
        export int event_type = 0
        export int key = 0
        export int last_key = -1
        export int SDLK_ESCAPE = 27
    }
    section code {
    function handle:
        call SDLCore.poll_one_event
        mov event_type, SDLCore.last_event_type
        cmp event_type, 0
        je ih_ret
        cmp event_type, 256
        je do_quit
        cmp event_type, 768
        jne ih_ret
        mov key, SDLCore.last_key_code
        mov last_key, key
        cmp key, SDLK_ESCAPE
        je do_quit
        jmp ih_ret
    do_quit:
        mov Game.running, 0
    ih_ret:
        ret
    }
}

object Game {

    section object { SDLCore, Text, Input }

    section data {
        export int running = 1
        int delay_ms = 16
    }
    section code {
    function init:
        call SDLCore.init
        call Text.init
        ret
    function cleanup:
        call Text.release
        call SDLCore.shutdown
        invoke quit
        ret
    function frame:
        call SDLCore.begin_frame
        call Text.draw
        call SDLCore.end_frame
        ret
    function loop:
        mov running, 1
    lp:
        cmp running, 1
        jne lpend
    ev:
        call Input.handle
        cmp Input.event_type, 0
        jne ev
        call frame
        invoke delay, delay_ms
        jmp lp
    lpend:
        ret
    }
}
