program TicTacToe {
    section data {
        ptr board = null
        int turn = 0
        int current_player = 0
        int move = 0
        int winner = 0
        int P_X = 88
        int P_O = 79
        int P_EMPTY = 46
        int i = 0
        int temp = 0
        int v1 = 0
        int v2 = 0
        int v3 = 0
        int al = 0
        int bl = 0
        int cl = 0
        string welcome = "--- MXVM Tic-Tac-Toe ---\n"
        string prompt = "Player %c, enter position (0-8): "
        string invalid_move = "Invalid move. That spot is taken or out of bounds.\n"
        string win_msg = "Player %c wins!\n"
        string draw_msg = "It's a draw!\n"
        string row_fmt =  "%c | %c | %c\n"
        string sep_line = "- + - + - \n"
        string input_buffer, 8
        string char_fmt = "%c"
        string newline = "\n"
    }

    section code {
    start:
        alloc board, 8, 9
        print welcome
        call init_board
        jmp game_loop

    game_loop:
        call print_board
        mov winner, 0 
        call check_win
        cmp winner, 0
        jne game_over
        cmp turn, 9
        je draw
        mod temp, turn, 2
        cmp temp, 0
        je set_x
        mov current_player, P_O
        jmp prompt_player

    set_x:
        mov current_player, P_X

    prompt_player:
        print prompt, current_player
        jmp get_player_input

    get_player_input:
        getline input_buffer
        to_int move, input_buffer
        cmp move, 0
        jl invalid
        cmp move, 8
        jg invalid
        load temp, board, move, 8
        cmp temp, P_EMPTY
        jne invalid
        store current_player, board, move, 8
        add turn, 1
        jmp game_loop

    invalid:
        print invalid_move
        jmp game_loop

    game_over:
        call print_board
        cmp winner, 1
        je x_wins
        print win_msg, P_O
        call release
        done

    x_wins:
        print win_msg, P_X
        call release
        done

    draw:
        call print_board
        print draw_msg
        call release
        done

    function init_board:
        mov i, 0
    init_loop:
        cmp i, 9
        jge init_done
        store P_EMPTY, board, i, 8
        add i, 1
        jmp init_loop
    init_done:
        ret

    function print_board:
        # Row 1
        load v1, board, 0, 8
        load v2, board, 1, 8
        load v3, board, 2, 8
        print row_fmt, v1, v2, v3
        print sep_line
        # Row 2
        load v1, board, 3, 8
        load v2, board, 4, 8
        load v3, board, 5, 8
        print row_fmt, v1, v2, v3
        print sep_line
        # Row 3
        load v1, board, 6, 8
        load v2, board, 7, 8
        load v3, board, 8, 8
        print row_fmt, v1, v2, v3
        ret

    function check_win:
        # Rows
        mov al, 0
        mov bl, 1
        mov cl, 2
        call check_line
        cmp winner, 0
        jne check_win_done

        mov al, 3
        mov bl, 4
        mov cl, 5
        call check_line
        cmp winner, 0
        jne check_win_done

        mov al, 6
        mov bl, 7
        mov cl, 8
        call check_line
        cmp winner, 0
        jne check_win_done

        # Columns
        mov al, 0
        mov bl, 3
        mov cl, 6
        call check_line
        cmp winner, 0
        jne check_win_done

        mov al, 1
        mov bl, 4
        mov cl, 7
        call check_line
        cmp winner, 0
        jne check_win_done

        mov al, 2
        mov bl, 5
        mov cl, 8
        call check_line
        cmp winner, 0
        jne check_win_done

        # Diagonals
        mov al, 0
        mov bl, 4
        mov cl, 8
        call check_line
        cmp winner, 0
        jne check_win_done

        mov al, 2
        mov bl, 4
        mov cl, 6
        call check_line
    check_win_done:
        ret

    function check_line:
        load v1, board, al, 8
        load v2, board, bl, 8
        load v3, board, cl, 8
        cmp v1, P_EMPTY
        je check_line_done
        cmp v1, v2
        jne check_line_done
        cmp v1, v3
        jne check_line_done
        cmp v1, P_X
        je set_winner_x
        cmp v1, P_O
        je set_winner_o
        jmp check_line_done
    set_winner_x:
        mov winner, 1
        jmp check_line_done
    set_winner_o:
        mov winner, 2
        jmp check_line_done
    check_line_done:
        ret

    function release:
        free board
        ret
    }
}
