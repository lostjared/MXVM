program Tokenize {
    section module { io, string }

    section data {
        string input_buffer, 256
        string token_buf, 256

        int i = 0
        int temp = 0
        int len = 0
        int idx = 0
        byte char_val = 0

        int token_start = 0
        int token_num   = 0

        int zero = 0
        int one  = 1

        ptr buffer = null
        ptr token  = null

        string output_fmt = "Token %d: %s\n"
        string ask        = "Enter a line of text: "
    }

    section code {
        # Prompt & read
        print ask
        getline input_buffer

        # Allocate working buffers and copy in
        alloc buffer, 1, 256
        alloc token,  1, 256
        invoke strncpy, buffer, input_buffer, 256

        mov i, zero
        mov token_num, zero

    scan_loop:
        cmp i, 256
        jge idone

        # Load current char
        load char_val, buffer, i, 1
        cmp char_val, zero
        je idone            # end-of-string

        # Skip spaces
        cmp char_val, 32
        jne found_nonspace
        add i, one
        jmp scan_loop

    found_nonspace:
        mov token_start, i  # mark token start

    token_loop:
        load char_val, buffer, i, 1
        cmp char_val, zero
        je extract_token    # EOL → flush
        cmp char_val, 32
        je extract_token    # space → flush
        add i, one
        jmp token_loop

    extract_token:
        # Calculate length = i - token_start
        mov len, i
        sub len, token_start

        # Copy characters into token_buf
        mov temp, zero
    copy_char:
        cmp temp, len
        jge after_copy
        mov idx, token_start
        add idx, temp
        load char_val, buffer, idx, 1
        store char_val, token, temp, 1
        add temp, one
        jmp copy_char

    after_copy:
        # Null-terminate
        store zero, token, temp, 1

        # Print numbered token
        add token_num, one
        print output_fmt, token_num, token

        # If EOL, finish
        cmp char_val, zero
        je idone

        # Otherwise skip delimiter and continue
        add i, one
        jmp scan_loop

    idone:
        free buffer
        free token
        done
    }
}
