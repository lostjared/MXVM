program Breakout {
	section module {
 		sdl,
		std,
		string
	}
	section data {
		int rax = 0
		int rbx = 0
		int rcx = 0
		int rdx = 0
		int rsi = 0
		int rdi = 0
		int r8 = 0
		int r9 = 0
		int r10 = 0
		int r11 = 0
		int r12 = 0
		int r13 = 0
		int r14 = 0
		int r15 = 0
		ptr _tmpptr0 = null
		ptr _tmpptr1 = null
		ptr _tmpptr2 = null
		ptr _tmpptr3 = null
		ptr arg0 = null
		string str_0 = "font.ttf"
		string str_1 = "Breakout"
		string str_2 = "Score: "
		string str_3 = "Lives: "
		string str_4 = "failed to init SDL"
		string str_5 = "Could not create window"
		string str_6 = "could not create renderer"
		string str_7 = "could not create render target"
		string str_8 = "Font subsystem failed to load"
		string str_9 = "failed to open: "
		string fmt_str = "%s "
		string newline = "\n"
		ptr filename = null
		int running = 0
		int window_id = 0
		int renderer = 0
		int target_id = 0
		int font_id = 0
		int event_type_result = 0
		int key = 0
		ptr paddle = null
		ptr ball = null
		int ball_dx = 0
		int ball_dy = 0
		ptr blocks = null
		int lives = 0
		int score = 0
		int draw_box_px = 0
		int draw_box_py = 0
		int draw_box_pw = 0
		int draw_box_ph = 0
		int reset_level_x = 0
		int reset_level_y = 0
		int reset_level_i = 0
		int update_ball_nx = 0
		int update_ball_ny = 0
		int update_ball_i = 0
		int update_ball_gx = 0
		int update_ball_gy = 0
		int update_ball_bx = 0
		int update_ball_by = 0
		int update_ball_bw = 0
		int update_ball_bh = 0
		int update_ball_hitOnce = 0
		int update_ball_anyLeft = 0
		int update_ball_topHit = 0
		int update_ball_bottomHit = 0
		int setcolor_index = 0
		int render_i = 0
		int render_gx = 0
		int render_gy = 0
		int render_bx = 0
		int render_by = 0
		ptr init_title = null
		int init_xval = 0
		int init_yval = 0
		int init_wval = 0
		int init_hval = 0
		int init_result = 0
		int aabb_ax = 0
		int aabb_ay = 0
		int aabb_aw = 0
		int aabb_ah = 0
		int aabb_bx = 0
		int aabb_by = 0
		int aabb_bw = 0
		int aabb_bh = 0
	}
	section code {
	start:
		mov filename, str_0
		alloc paddle, 32, 1
		alloc ball, 32, 1
		alloc blocks, 8, 60
		mov arg0, str_1
		mov rbx, 100
		mov rcx, 100
		mov rdx, 1280
		mov rsi, 720
		call PROC_init
	WHILE_0:
		mov rbx, 1
		mov rdx, rbx
		cmp running, rdx
		je CMP_TRUE_2
		mov rcx, 0
		jmp CMP_END_3
	CMP_TRUE_2:
		mov rcx, 1
	CMP_END_3:
		cmp rcx, 0
		je ENDWHILE_1
	WHILE_4:
		invoke poll_event
		return rdx
		mov rdi, rdx
		cmp rdi, 0
		jne CMP_TRUE_6
		mov rsi, 0
		jmp CMP_END_7
	CMP_TRUE_6:
		mov rsi, 1
	CMP_END_7:
		cmp rsi, 0
		je ENDWHILE_5
		invoke get_event_type
		return rdi
		mov event_type_result, rdi
		cmp event_type_result, 256
		je CMP_TRUE_10
		mov r8, 0
		jmp CMP_END_11
	CMP_TRUE_10:
		mov r8, 1
	CMP_END_11:
		cmp r8, 0
		je ELSE_8
		mov r9, 0
		mov running, r9
		jmp ENDIF_9
	ELSE_8:
	ENDIF_9:
		cmp event_type_result, 768
		je CMP_TRUE_14
		mov r9, 0
		jmp CMP_END_15
	CMP_TRUE_14:
		mov r9, 1
	CMP_END_15:
		cmp r9, 0
		je ELSE_12
		invoke get_key_code
		return r9
		mov key, r9
		cmp key, 27
		je CMP_TRUE_18
		mov r9, 0
		jmp CMP_END_19
	CMP_TRUE_18:
		mov r9, 1
	CMP_END_19:
		cmp r9, 0
		je ELSE_16
		mov r9, 0
		mov running, r9
		jmp ENDIF_17
	ELSE_16:
	ENDIF_17:
		jmp ENDIF_13
	ELSE_12:
	ENDIF_13:
		cmp event_type_result, 769
		je CMP_TRUE_22
		mov r9, 0
		jmp CMP_END_23
	CMP_TRUE_22:
		mov r9, 1
	CMP_END_23:
		cmp r9, 0
		je ELSE_20
		invoke get_key_code
		return r9
		mov key, r9
		jmp ENDIF_21
	ELSE_20:
	ENDIF_21:
		jmp WHILE_4
	ENDWHILE_5:
		call PROC_update_input
		call PROC_update_ball
		call PROC_render
		invoke present_scaled, renderer, target_id, 1280, 720
		invoke delay, 16
		jmp WHILE_0
	ENDWHILE_1:
		call PROC_cleanup
		free blocks
		free paddle
		free ball
		done
	function PROC_draw_box:
		mov draw_box_px, rbx
		mov draw_box_py, rcx
		mov draw_box_pw, rdx
		mov draw_box_ph, rsi
		invoke fill_rect, renderer, draw_box_px, draw_box_py, draw_box_pw, draw_box_ph
	PROC_END_draw_box:
		ret
	function PROC_reset_ball_paddle:
		store 284, paddle, 0, 1
		store 336, paddle, 8, 1
		store 72, paddle, 16, 1
		store 10, paddle, 24, 1
		load rbx, paddle, 0, 1
		mov rcx, rbx
		add rcx, 36
		mov rdx, rcx
		sub rdx, 3
		store rdx, ball, 0, 1
		load rsi, paddle, 8, 1
		mov rdi, rsi
		sub rdi, 6
		mov r8, rdi
		sub r8, 2
		store r8, ball, 8, 1
		store 6, ball, 16, 1
		store 6, ball, 24, 1
		invoke get_ticks
		return r9
		mod r9, 2
		mov r11, r9
		cmp r11, 0
		je CMP_TRUE_26
		mov r10, 0
		jmp CMP_END_27
	CMP_TRUE_26:
		mov r10, 1
	CMP_END_27:
		cmp r10, 0
		je ELSE_24
		mov ball_dx, 3
		jmp ENDIF_25
	ELSE_24:
		mov r9, 0
		sub r9, 3
		mov ball_dx, r9
	ENDIF_25:
		mov r9, 0
		sub r9, 3
		mov ball_dy, r9
	PROC_END_reset_ball_paddle:
		ret
	function PROC_reset_level:
		mov reset_level_i, 0
		mov reset_level_y, 0
	FOR_28:
		mov rbx, 5
		cmp reset_level_y, rbx
		jg ENDFOR_29
		mov reset_level_x, 0
	FOR_31:
		mov rcx, 9
		cmp reset_level_x, rcx
		jg ENDFOR_32
		invoke rand
		return rdx
		mov rsi, rdx
		mod rsi, 3
		mov rdi, 1
		add rdi, rsi
		mov r8, reset_level_i
		mov r9, r8
		cmp r9, 0
		jl IDX_OOB_35
		cmp r9, 59
		jg IDX_OOB_35
		jmp IDX_OK_34
	IDX_OOB_35:
		exit 1
	IDX_OK_34:
		mov r9, reset_level_i
		store rdi, blocks, r9, 8
		mov r9, reset_level_i
		add r9, 1
		mov reset_level_i, r9
	FOR_CONTINUE_33:
		add reset_level_x, 1
		jmp FOR_31
	ENDFOR_32:
	FOR_CONTINUE_30:
		add reset_level_y, 1
		jmp FOR_28
	ENDFOR_29:
	PROC_END_reset_level:
		ret
	function PROC_clamp_paddle:
		load rbx, paddle, 0, 1
		mov rdx, rbx
		cmp rdx, 0
		jl CMP_TRUE_38
		mov rcx, 0
		jmp CMP_END_39
	CMP_TRUE_38:
		mov rcx, 1
	CMP_END_39:
		cmp rcx, 0
		je ELSE_36
		store 0, paddle, 0, 1
		jmp ENDIF_37
	ELSE_36:
	ENDIF_37:
		load rdx, paddle, 0, 1
		load rsi, paddle, 16, 1
		mov rdi, rdx
		add rdi, rsi
		mov r9, rdi
		cmp r9, 640
		jg CMP_TRUE_42
		mov r8, 0
		jmp CMP_END_43
	CMP_TRUE_42:
		mov r8, 1
	CMP_END_43:
		cmp r8, 0
		je ELSE_40
		load r9, paddle, 16, 1
		mov r10, 640
		sub r10, r9
		store r10, paddle, 0, 1
		jmp ENDIF_41
	ELSE_40:
	ENDIF_41:
	PROC_END_clamp_paddle:
		ret
	function PROC_update_input:
		invoke is_key_pressed, 80
		return rbx
		mov rdx, rbx
		cmp rdx, 0
		jne CMP_TRUE_46
		mov rcx, 0
		jmp CMP_END_47
	CMP_TRUE_46:
		mov rcx, 1
	CMP_END_47:
		cmp rcx, 0
		je ELSE_44
		load rdx, paddle, 0, 1
		mov rsi, rdx
		sub rsi, 6
		store rsi, paddle, 0, 1
		jmp ENDIF_45
	ELSE_44:
	ENDIF_45:
		invoke is_key_pressed, 79
		return rdi
		mov r9, rdi
		cmp r9, 0
		jne CMP_TRUE_50
		mov r8, 0
		jmp CMP_END_51
	CMP_TRUE_50:
		mov r8, 1
	CMP_END_51:
		cmp r8, 0
		je ELSE_48
		load r9, paddle, 0, 1
		add r9, 6
		store r9, paddle, 0, 1
		jmp ENDIF_49
	ELSE_48:
	ENDIF_49:
		call PROC_clamp_paddle
	PROC_END_update_input:
		ret
	function PROC_update_ball:
		load rbx, ball, 0, 1
		mov rcx, rbx
		add rcx, ball_dx
		mov update_ball_nx, rcx
		load rdx, ball, 8, 1
		mov rsi, rdx
		add rsi, ball_dy
		mov update_ball_ny, rsi
		cmp update_ball_ny, 0
		jle CMP_TRUE_54
		mov rdi, 0
		jmp CMP_END_55
	CMP_TRUE_54:
		mov rdi, 1
	CMP_END_55:
		cmp rdi, 0
		je ELSE_52
		mov update_ball_ny, 0
		mov r8, 0
		sub r8, ball_dy
		mov ball_dy, r8
		jmp ENDIF_53
	ELSE_52:
	ENDIF_53:
		cmp update_ball_nx, 0
		jle CMP_TRUE_58
		mov r9, 0
		jmp CMP_END_59
	CMP_TRUE_58:
		mov r9, 1
	CMP_END_59:
		cmp r9, 0
		je ELSE_56
		mov update_ball_nx, 0
		mov r9, 0
		sub r9, ball_dx
		mov ball_dx, r9
		jmp ENDIF_57
	ELSE_56:
	ENDIF_57:
		load r9, ball, 16, 1
		mov r10, update_ball_nx
		add r10, r9
		mov r11, r10
		cmp r11, 640
		jge CMP_TRUE_62
		mov r9, 0
		jmp CMP_END_63
	CMP_TRUE_62:
		mov r9, 1
	CMP_END_63:
		cmp r9, 0
		je ELSE_60
		load r9, ball, 16, 1
		mov r10, 640
		sub r10, r9
		mov update_ball_nx, r10
		mov r9, 0
		sub r9, ball_dx
		mov ball_dx, r9
		jmp ENDIF_61
	ELSE_60:
	ENDIF_61:
		load r9, ball, 24, 1
		mov r10, update_ball_ny
		add r10, r9
		mov r11, r10
		cmp r11, 360
		jge CMP_TRUE_66
		mov r9, 0
		jmp CMP_END_67
	CMP_TRUE_66:
		mov r9, 1
	CMP_END_67:
		cmp r9, 0
		je ELSE_64
		mov r9, lives
		sub r9, 1
		mov lives, r9
		cmp lives, 0
		jle CMP_TRUE_70
		mov r9, 0
		jmp CMP_END_71
	CMP_TRUE_70:
		mov r9, 1
	CMP_END_71:
		cmp r9, 0
		je ELSE_68
		mov lives, 3
		mov score, 0
		call PROC_reset_level
		jmp ENDIF_69
	ELSE_68:
	ENDIF_69:
		call PROC_reset_ball_paddle
		jmp PROC_END_update_ball
		jmp ENDIF_65
	ELSE_64:
	ENDIF_65:
		mov rbx, update_ball_nx
		mov rcx, update_ball_ny
		load r9, ball, 16, 1
		mov rdx, r9
		load r10, ball, 24, 1
		mov rsi, r10
		load r11, paddle, 0, 1
		mov rdi, r11
		load r12, paddle, 8, 1
		mov r8, r12
		load r13, paddle, 16, 1
		mov r9, r13
		load r14, paddle, 24, 1
		mov r10, r14
		call FUNC_aabb
		mov r15, rax
		cmp r15, 0
		je ELSE_72
		load r9, paddle, 8, 1
		load r10, ball, 24, 1
		sub r9, r10
		sub r9, 1
		mov update_ball_ny, r9
		mov r9, 0
		sub r9, ball_dy
		mov ball_dy, r9
		load r9, ball, 16, 1
		div r9, 2
		mov r10, update_ball_nx
		add r10, r9
		load r9, paddle, 0, 1
		load r11, paddle, 16, 1
		div r11, 2
		add r9, r11
		mov r12, r10
		mov r13, r9
		cmp r12, r13
		jl CMP_TRUE_76
		mov r11, 0
		jmp CMP_END_77
	CMP_TRUE_76:
		mov r11, 1
	CMP_END_77:
		cmp r11, 0
		je ELSE_74
		cmp ball_dx, 0
		jg CMP_TRUE_80
		mov r9, 0
		jmp CMP_END_81
	CMP_TRUE_80:
		mov r9, 1
	CMP_END_81:
		cmp r9, 0
		je ELSE_78
		mov r9, 0
		sub r9, ball_dx
		mov ball_dx, r9
		jmp ENDIF_79
	ELSE_78:
	ENDIF_79:
		jmp ENDIF_75
	ELSE_74:
		cmp ball_dx, 0
		jl CMP_TRUE_84
		mov r9, 0
		jmp CMP_END_85
	CMP_TRUE_84:
		mov r9, 1
	CMP_END_85:
		cmp r9, 0
		je ELSE_82
		mov r9, 0
		sub r9, ball_dx
		mov ball_dx, r9
		jmp ENDIF_83
	ELSE_82:
	ENDIF_83:
	ENDIF_75:
		jmp ENDIF_73
	ELSE_72:
	ENDIF_73:
		mov update_ball_hitOnce, 0
		mov update_ball_i, 0
	WHILE_86:
		cmp update_ball_i, 60
		jl CMP_TRUE_88
		mov r9, 0
		jmp CMP_END_89
	CMP_TRUE_88:
		mov r9, 1
	CMP_END_89:
		cmp r9, 0
		je ENDWHILE_87
		cmp update_ball_hitOnce, 0
		je CMP_TRUE_92
		mov r9, 0
		jmp CMP_END_93
	CMP_TRUE_92:
		mov r9, 1
	CMP_END_93:
		cmp r9, 0
		je ELSE_90
		mov r9, update_ball_i
		load r10, blocks, r9, 8
		mov r11, r10
		cmp r11, 1
		jge CMP_TRUE_96
		mov r9, 0
		jmp CMP_END_97
	CMP_TRUE_96:
		mov r9, 1
	CMP_END_97:
		cmp r9, 0
		je ELSE_94
		mov r9, update_ball_i
		div r9, 10
		mov update_ball_gy, r9
		mul r9, 10
		mov r10, update_ball_i
		sub r10, r9
		mov update_ball_gx, r10
		mov r9, update_ball_gx
		mul r9, 64
		mov r10, 8
		add r10, r9
		mov update_ball_bx, r10
		mov r9, update_ball_gy
		mul r9, 20
		mov r10, 40
		add r10, r9
		mov update_ball_by, r10
		mov update_ball_bw, 60
		mov update_ball_bh, 16
		mov rbx, update_ball_nx
		mov rcx, update_ball_ny
		load r9, ball, 16, 1
		mov rdx, r9
		load r10, ball, 24, 1
		mov rsi, r10
		mov rdi, update_ball_bx
		mov r8, update_ball_by
		mov r9, update_ball_bw
		mov r10, update_ball_bh
		call FUNC_aabb
		mov r11, rax
		cmp r11, 0
		je ELSE_98
		mov r9, update_ball_i
		mov r10, r9
		cmp r10, 0
		jl IDX_OOB_101
		cmp r10, 59
		jg IDX_OOB_101
		jmp IDX_OK_100
	IDX_OOB_101:
		exit 1
	IDX_OK_100:
		mov r10, update_ball_i
		store 0, blocks, r10, 8
		mov r10, score
		add r10, 10
		mov score, r10
		mov update_ball_topHit, 0
		mov update_ball_bottomHit, 0
		load r10, ball, 8, 1
		load r11, ball, 24, 1
		add r10, r11
		mov r12, r10
		cmp r12, update_ball_by
		jle CMP_TRUE_104
		mov r11, 0
		jmp CMP_END_105
	CMP_TRUE_104:
		mov r11, 1
	CMP_END_105:
		cmp r11, 0
		je ELSE_102
		mov update_ball_topHit, 1
		jmp ENDIF_103
	ELSE_102:
	ENDIF_103:
		load r10, ball, 8, 1
		mov r11, update_ball_by
		add r11, update_ball_bh
		mov r13, r10
		mov r14, r11
		cmp r13, r14
		jge CMP_TRUE_108
		mov r12, 0
		jmp CMP_END_109
	CMP_TRUE_108:
		mov r12, 1
	CMP_END_109:
		cmp r12, 0
		je ELSE_106
		mov update_ball_bottomHit, 1
		jmp ENDIF_107
	ELSE_106:
	ENDIF_107:
		cmp update_ball_topHit, 1
		jge CMP_TRUE_112
		mov r10, 0
		jmp CMP_END_113
	CMP_TRUE_112:
		mov r10, 1
	CMP_END_113:
		cmp update_ball_bottomHit, 1
		jge CMP_TRUE_114
		mov r11, 0
		jmp CMP_END_115
	CMP_TRUE_114:
		mov r11, 1
	CMP_END_115:
		cmp r10, 0
		jne OR_ONE_116
		cmp r11, 0
		jne OR_ONE_116
		mov r12, 0
		jmp OR_END_117
	OR_ONE_116:
		mov r12, 1
	OR_END_117:
		cmp r12, 0
		je ELSE_110
		mov r10, 0
		sub r10, ball_dy
		mov ball_dy, r10
		jmp ENDIF_111
	ELSE_110:
		mov r10, 0
		sub r10, ball_dx
		mov ball_dx, r10
	ENDIF_111:
		mov update_ball_hitOnce, 1
		jmp ENDIF_99
	ELSE_98:
	ENDIF_99:
		jmp ENDIF_95
	ELSE_94:
	ENDIF_95:
		jmp ENDIF_91
	ELSE_90:
	ENDIF_91:
		mov r10, update_ball_i
		add r10, 1
		mov update_ball_i, r10
		jmp WHILE_86
	ENDWHILE_87:
		store update_ball_nx, ball, 0, 1
		store update_ball_ny, ball, 8, 1
		mov update_ball_anyLeft, 0
		mov update_ball_i, 0
	WHILE_118:
		cmp update_ball_i, 60
		jl CMP_TRUE_120
		mov r10, 0
		jmp CMP_END_121
	CMP_TRUE_120:
		mov r10, 1
	CMP_END_121:
		cmp r10, 0
		je ENDWHILE_119
		mov r10, update_ball_i
		load r11, blocks, r10, 8
		mov r12, r11
		cmp r12, 1
		jge CMP_TRUE_124
		mov r10, 0
		jmp CMP_END_125
	CMP_TRUE_124:
		mov r10, 1
	CMP_END_125:
		cmp r10, 0
		je ELSE_122
		mov update_ball_anyLeft, 1
		jmp ENDIF_123
	ELSE_122:
	ENDIF_123:
		mov r10, update_ball_i
		add r10, 1
		mov update_ball_i, r10
		jmp WHILE_118
	ENDWHILE_119:
		cmp update_ball_anyLeft, 0
		je CMP_TRUE_128
		mov r10, 0
		jmp CMP_END_129
	CMP_TRUE_128:
		mov r10, 1
	CMP_END_129:
		cmp r10, 0
		je ELSE_126
		call PROC_reset_level
		call PROC_reset_ball_paddle
		jmp ENDIF_127
	ELSE_126:
	ENDIF_127:
	PROC_END_update_ball:
		ret
	function PROC_setcolor:
		mov setcolor_index, rbx
		cmp setcolor_index, 1
		je CASE_0_131
		cmp setcolor_index, 2
		je CASE_1_132
		cmp setcolor_index, 3
		je CASE_2_133
		jmp CASE_ELSE_134
	CASE_0_131:
		invoke set_draw_color, renderer, 255, 0, 0, 255
		jmp CASE_END_130
	CASE_1_132:
		invoke set_draw_color, renderer, 0, 255, 0, 255
		jmp CASE_END_130
	CASE_2_133:
		invoke set_draw_color, renderer, 0, 0, 255, 255
		jmp CASE_END_130
	CASE_ELSE_134:
		invoke set_draw_color, renderer, 255, 255, 255, 255
	CASE_END_130:
	PROC_END_setcolor:
		ret
	function PROC_render:
		invoke set_render_target, renderer, target_id
		invoke set_draw_color, renderer, 0, 0, 0, 255
		invoke clear, renderer
		invoke set_draw_color, renderer, 255, 255, 255, 255
		load rbx, paddle, 0, 1
		load rcx, paddle, 8, 1
		load rdx, paddle, 16, 1
		load rsi, paddle, 24, 1
		call PROC_draw_box
		load rdi, ball, 0, 1
		mov rbx, rdi
		load r8, ball, 8, 1
		mov rcx, r8
		mov rdx, 6
		mov rsi, 6
		call PROC_draw_box
		invoke set_draw_color, renderer, 200, 200, 200, 255
		mov render_i, 0
	WHILE_135:
		cmp render_i, 60
		jl CMP_TRUE_137
		mov r9, 0
		jmp CMP_END_138
	CMP_TRUE_137:
		mov r9, 1
	CMP_END_138:
		cmp r9, 0
		je ENDWHILE_136
		mov r9, render_i
		load r10, blocks, r9, 8
		mov r11, r10
		cmp r11, 1
		jge CMP_TRUE_141
		mov r9, 0
		jmp CMP_END_142
	CMP_TRUE_141:
		mov r9, 1
	CMP_END_142:
		cmp r9, 0
		je ELSE_139
		mov r9, render_i
		div r9, 10
		mov render_gy, r9
		mul r9, 10
		mov r10, render_i
		sub r10, r9
		mov render_gx, r10
		mov r9, render_gx
		mul r9, 64
		mov r10, 8
		add r10, r9
		mov render_bx, r10
		mov r9, render_gy
		mul r9, 20
		mov r10, 40
		add r10, r9
		mov render_by, r10
		mov r9, render_i
		load r10, blocks, r9, 8
		mov rbx, r10
		call PROC_setcolor
		mov rbx, render_bx
		mov rcx, render_by
		mov rdx, 60
		mov rsi, 16
		call PROC_draw_box
		jmp ENDIF_140
	ELSE_139:
	ENDIF_140:
		mov r9, render_i
		add r9, 1
		mov render_i, r9
		jmp WHILE_135
	ENDWHILE_136:
		invoke inttostr, score
		return _tmpptr0
		invoke strlen, str_2
		return r9
		invoke strlen, _tmpptr0
		return r10
		mov r11, r9
		add r11, r10
		add r11, 1
		alloc _tmpptr1, 1, r11
		invoke strncpy, _tmpptr1, str_2, r9
		invoke strncat, _tmpptr1, _tmpptr0, r10
		invoke draw_text, renderer, font_id, _tmpptr1, 8, 8, 255, 255, 255, 255
		invoke inttostr, lives
		return _tmpptr2
		invoke strlen, str_3
		return r9
		invoke strlen, _tmpptr2
		return r10
		mov r11, r9
		add r11, r10
		add r11, 1
		alloc _tmpptr3, 1, r11
		invoke strncpy, _tmpptr3, str_3, r9
		invoke strncat, _tmpptr3, _tmpptr2, r10
		invoke draw_text, renderer, font_id, _tmpptr3, 120, 8, 255, 255, 255, 255
	PROC_END_render:
		free _tmpptr0
		free _tmpptr1
		free _tmpptr2
		free _tmpptr3
		ret
	function PROC_init:
		mov init_title, arg0
		mov init_xval, rbx
		mov init_yval, rcx
		mov init_wval, rdx
		mov init_hval, rsi
		invoke init
		return rbx
		mov init_result, rbx
		cmp init_result, 0
		jne CMP_TRUE_145
		mov rcx, 0
		jmp CMP_END_146
	CMP_TRUE_145:
		mov rcx, 1
	CMP_END_146:
		cmp rcx, 0
		je ELSE_143
		print fmt_str, str_4
		print newline
		exit 1
		jmp ENDIF_144
	ELSE_143:
	ENDIF_144:
		invoke create_window, init_title, init_xval, init_yval, init_wval, init_hval, 4
		return rdx
		mov window_id, rdx
		mov rsi, 0
		sub rsi, 1
		mov r8, rsi
		cmp window_id, r8
		je CMP_TRUE_149
		mov rdi, 0
		jmp CMP_END_150
	CMP_TRUE_149:
		mov rdi, 1
	CMP_END_150:
		cmp rdi, 0
		je ELSE_147
		print fmt_str, str_5
		print newline
		invoke quit
		exit 1
		jmp ENDIF_148
	ELSE_147:
	ENDIF_148:
		mov r8, 0
		sub r8, 1
		invoke create_renderer, window_id, r8, 2
		return r9
		mov renderer, r9
		mov r8, 0
		sub r8, 1
		mov r10, r8
		cmp renderer, r10
		je CMP_TRUE_153
		mov r9, 0
		jmp CMP_END_154
	CMP_TRUE_153:
		mov r9, 1
	CMP_END_154:
		cmp r9, 0
		je ELSE_151
		print fmt_str, str_6
		print newline
		invoke destroy_window, window_id
		invoke quit
		exit 1
		jmp ENDIF_152
	ELSE_151:
	ENDIF_152:
		invoke create_render_target, renderer, 640, 360
		return r9
		mov target_id, r9
		mov r9, 0
		sub r9, 1
		mov r11, r9
		cmp target_id, r11
		je CMP_TRUE_157
		mov r10, 0
		jmp CMP_END_158
	CMP_TRUE_157:
		mov r10, 1
	CMP_END_158:
		cmp r10, 0
		je ELSE_155
		print fmt_str, str_7
		print newline
		invoke destroy_renderer, renderer
		invoke destroy_window, window_id
		invoke quit
		exit 1
		jmp ENDIF_156
	ELSE_155:
	ENDIF_156:
		invoke init_text
		return r9
		mov r11, r9
		cmp r11, 1
		jne CMP_TRUE_161
		mov r10, 0
		jmp CMP_END_162
	CMP_TRUE_161:
		mov r10, 1
	CMP_END_162:
		cmp r10, 0
		je ELSE_159
		print fmt_str, str_8
		print newline
		exit 1
		jmp ENDIF_160
	ELSE_159:
	ENDIF_160:
		invoke load_font, filename, 16
		return r9
		mov font_id, r9
		mov r9, 0
		sub r9, 1
		mov r11, r9
		cmp font_id, r11
		je CMP_TRUE_165
		mov r10, 0
		jmp CMP_END_166
	CMP_TRUE_165:
		mov r10, 1
	CMP_END_166:
		cmp r10, 0
		je ELSE_163
		print fmt_str, str_9
		print fmt_str, filename
		print newline
		exit 1
		jmp ENDIF_164
	ELSE_163:
	ENDIF_164:
		mov lives, 3
		mov score, 0
		call PROC_reset_level
		call PROC_reset_ball_paddle
		mov r9, 1
		mov running, r9
	PROC_END_init:
		ret
	function PROC_cleanup:
		invoke destroy_render_target, target_id
		invoke destroy_renderer, renderer
		invoke destroy_window, window_id
		invoke quit_text
		invoke quit
	PROC_END_cleanup:
		ret
	function FUNC_aabb:
		mov aabb_ax, rbx
		mov aabb_ay, rcx
		mov aabb_aw, rdx
		mov aabb_ah, rsi
		mov aabb_bx, rdi
		mov aabb_by, r8
		mov aabb_bw, r9
		mov aabb_bh, r10
		mov rbx, aabb_ax
		add rbx, aabb_aw
		mov rdx, rbx
		cmp rdx, aabb_bx
		jle CMP_TRUE_167
		mov rcx, 0
		jmp CMP_END_168
	CMP_TRUE_167:
		mov rcx, 1
	CMP_END_168:
		mov rdx, aabb_bx
		add rdx, aabb_bw
		mov rdi, rdx
		cmp rdi, aabb_ax
		jle CMP_TRUE_169
		mov rsi, 0
		jmp CMP_END_170
	CMP_TRUE_169:
		mov rsi, 1
	CMP_END_170:
		cmp rcx, 0
		jne OR_ONE_171
		cmp rsi, 0
		jne OR_ONE_171
		mov rdi, 0
		jmp OR_END_172
	OR_ONE_171:
		mov rdi, 1
	OR_END_172:
		mov r8, aabb_ay
		add r8, aabb_ah
		mov r10, r8
		cmp r10, aabb_by
		jle CMP_TRUE_173
		mov r9, 0
		jmp CMP_END_174
	CMP_TRUE_173:
		mov r9, 1
	CMP_END_174:
		cmp rdi, 0
		jne OR_ONE_175
		cmp r9, 0
		jne OR_ONE_175
		mov r10, 0
		jmp OR_END_176
	OR_ONE_175:
		mov r10, 1
	OR_END_176:
		mov r9, aabb_by
		add r9, aabb_bh
		mov r12, r9
		cmp r12, aabb_ay
		jle CMP_TRUE_177
		mov r11, 0
		jmp CMP_END_178
	CMP_TRUE_177:
		mov r11, 1
	CMP_END_178:
		cmp r10, 0
		jne OR_ONE_179
		cmp r11, 0
		jne OR_ONE_179
		mov r9, 0
		jmp OR_END_180
	OR_ONE_179:
		mov r9, 1
	OR_END_180:
		not r9
		mov rax, r9
	FUNC_END_aabb:
		ret
	}
}

