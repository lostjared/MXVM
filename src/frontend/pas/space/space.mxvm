program Space {
	section module {
 		sdl,
		std
	}
	section data {
		int rax = 0
		int rbx = 0
		int rcx = 0
		int rdx = 0
		int rsi = 0
		int rdi = 0
		int r8 = 0
		int r9 = 0
		int r10 = 0
		int r11 = 0
		float xmm0 = 0.0
		float xmm1 = 0.0
		float xmm2 = 0.0
		float xmm3 = 0.0
		float xmm4 = 0.0
		float xmm5 = 0.0
		float xmm6 = 0.0
		float xmm7 = 0.0
		float xmm8 = 0.0
		float xmm9 = 0.0
		float xmm10 = 0.0
		float xmm11 = 0.0
		float xmm12 = 0.0
		float xmm13 = 0.0
		float xmm14 = 0.0
		float xmm15 = 0.0
		ptr arg0 = null
		float real_const_5 = 0.995
		float real_const_3 = 0.08
		float real_const_2 = 180.000000
		float real_const_1 = 320.000000
		float real_const_4 = 0.14
		string str_0 = "Space"
		string str_1 = "font.ttf"
		string str_2 = "failed to init SDL"
		string str_3 = "Could not create window"
		string str_4 = "could not create renderer"
		string str_5 = "could not create render target"
		string str_6 = "Font subsystem failed to load"
		string str_7 = "failed to open: "
		string fmt_str = "%s "
		string newline = "\n"
		ptr title = null
		ptr filename = null
		int running = 0
		int event_type_result = 0
		int window_id = 0
		int renderer = 0
		int target_id = 0
		int font_id = 0
		int key = 0
		ptr the_ship = null
		int keyLeft = 0
		int keyRight = 0
		int keyThrust = 0
		float draw_ship_lx1 = 0.0
		float draw_ship_ly1 = 0.0
		float draw_ship_lx2 = 0.0
		float draw_ship_ly2 = 0.0
		float draw_ship_lx3 = 0.0
		float draw_ship_ly3 = 0.0
		int draw_ship_x1 = 0
		int draw_ship_y1 = 0
		int draw_ship_x2 = 0
		int draw_ship_y2 = 0
		int draw_ship_x3 = 0
		int draw_ship_y3 = 0
		float draw_ship_c = 0.0
		float draw_ship_s = 0.0
		float update_ship_accel = 0.0
		float update_ship_drag = 0.0
		ptr init_title = null
		int init_xval = 0
		int init_yval = 0
		int init_wval = 0
		int init_hval = 0
		int init_result = 0
	}
	section code {
	start:
		mov title, str_0
		mov filename, str_1
		alloc the_ship, 48, 1
		mov arg0, title
		mov rbx, 100
		mov rcx, 100
		mov rdx, 1280
		mov rsi, 720
		call PROC_init
		mov rbx, 1
		mov running, rbx
	WHILE_0:
		mov rcx, 1
		mov rsi, rcx
		cmp running, rsi
		je CMP_TRUE_2
		mov rdx, 0
		jmp CMP_END_3
	CMP_TRUE_2:
		mov rdx, 1
	CMP_END_3:
		cmp rdx, 0
		je ENDWHILE_1
	WHILE_4:
		invoke poll_event
		return rsi
		mov r8, rsi
		cmp r8, 0
		jne CMP_TRUE_6
		mov rdi, 0
		jmp CMP_END_7
	CMP_TRUE_6:
		mov rdi, 1
	CMP_END_7:
		cmp rdi, 0
		je ENDWHILE_5
		invoke get_event_type
		return r8
		mov event_type_result, r8
		cmp event_type_result, 256
		je CMP_TRUE_10
		mov r9, 0
		jmp CMP_END_11
	CMP_TRUE_10:
		mov r9, 1
	CMP_END_11:
		cmp r9, 0
		je ELSE_8
		mov r9, 0
		mov running, r9
		jmp ENDIF_9
	ELSE_8:
	ENDIF_9:
		cmp event_type_result, 768
		je CMP_TRUE_14
		mov r9, 0
		jmp CMP_END_15
	CMP_TRUE_14:
		mov r9, 1
	CMP_END_15:
		cmp r9, 0
		je ELSE_12
		invoke get_key_code
		return r9
		mov key, r9
		cmp key, 27
		je CMP_TRUE_18
		mov r9, 0
		jmp CMP_END_19
	CMP_TRUE_18:
		mov r9, 1
	CMP_END_19:
		cmp r9, 0
		je ELSE_16
		mov r9, 0
		mov running, r9
		jmp ENDIF_17
	ELSE_16:
	ENDIF_17:
		cmp key, 1073741904
		je CMP_TRUE_22
		mov r9, 0
		jmp CMP_END_23
	CMP_TRUE_22:
		mov r9, 1
	CMP_END_23:
		cmp r9, 0
		je ELSE_20
		mov r9, 1
		mov keyLeft, r9
		jmp ENDIF_21
	ELSE_20:
	ENDIF_21:
		cmp key, 1073741903
		je CMP_TRUE_26
		mov r9, 0
		jmp CMP_END_27
	CMP_TRUE_26:
		mov r9, 1
	CMP_END_27:
		cmp r9, 0
		je ELSE_24
		mov r9, 1
		mov keyRight, r9
		jmp ENDIF_25
	ELSE_24:
	ENDIF_25:
		cmp key, 1073741906
		je CMP_TRUE_30
		mov r9, 0
		jmp CMP_END_31
	CMP_TRUE_30:
		mov r9, 1
	CMP_END_31:
		cmp r9, 0
		je ELSE_28
		mov r9, 1
		mov keyThrust, r9
		jmp ENDIF_29
	ELSE_28:
	ENDIF_29:
		jmp ENDIF_13
	ELSE_12:
	ENDIF_13:
		cmp event_type_result, 769
		je CMP_TRUE_34
		mov r9, 0
		jmp CMP_END_35
	CMP_TRUE_34:
		mov r9, 1
	CMP_END_35:
		cmp r9, 0
		je ELSE_32
		invoke get_key_code
		return r9
		mov key, r9
		cmp key, 1073741904
		je CMP_TRUE_38
		mov r9, 0
		jmp CMP_END_39
	CMP_TRUE_38:
		mov r9, 1
	CMP_END_39:
		cmp r9, 0
		je ELSE_36
		mov r9, 0
		mov keyLeft, r9
		jmp ENDIF_37
	ELSE_36:
	ENDIF_37:
		cmp key, 1073741903
		je CMP_TRUE_42
		mov r9, 0
		jmp CMP_END_43
	CMP_TRUE_42:
		mov r9, 1
	CMP_END_43:
		cmp r9, 0
		je ELSE_40
		mov r9, 0
		mov keyRight, r9
		jmp ENDIF_41
	ELSE_40:
	ENDIF_41:
		cmp key, 1073741906
		je CMP_TRUE_46
		mov r9, 0
		jmp CMP_END_47
	CMP_TRUE_46:
		mov r9, 1
	CMP_END_47:
		cmp r9, 0
		je ELSE_44
		mov r9, 0
		mov keyThrust, r9
		jmp ENDIF_45
	ELSE_44:
	ENDIF_45:
		jmp ENDIF_33
	ELSE_32:
	ENDIF_33:
		jmp WHILE_4
	ENDWHILE_5:
		call PROC_update_ship
		call PROC_render
		invoke present_scaled, renderer, target_id, 1280, 720
		invoke delay, 16
		jmp WHILE_0
	ENDWHILE_1:
		call PROC_cleanup
		free the_ship
		done
	function PROC_init_space:
		store real_const_1, the_ship, 0, 1
		store real_const_2, the_ship, 8, 1
		store 0, the_ship, 16, 1
		store 0, the_ship, 24, 1
		store 0, the_ship, 32, 1
		store 3, the_ship, 40, 1
	PROC_END_init_space:
		ret
	function PROC_draw_ship:
		mov draw_ship_lx1, 0
		mov rbx, 0
		sub rbx, 12
		mov draw_ship_ly1, rbx
		mov rcx, 0
		sub rcx, 8
		mov draw_ship_lx2, rcx
		mov draw_ship_ly2, 8
		mov draw_ship_lx3, 8
		mov draw_ship_ly3, 8
		load xmm0, the_ship, 32, 1
		invoke cos, xmm0
		return xmm1
		mov draw_ship_c, xmm1
		load xmm0, the_ship, 32, 1
		invoke sin, xmm0
		return xmm2
		mov draw_ship_s, xmm2
		load xmm0, the_ship, 0, 1
		mov xmm3, draw_ship_lx1
		mul xmm3, draw_ship_c
		mov xmm4, draw_ship_ly1
		mul xmm4, draw_ship_s
		sub xmm3, xmm4
		add xmm0, xmm3
		invoke trunc, xmm0
		return xmm5
		mov draw_ship_x1, xmm5
		load xmm0, the_ship, 8, 1
		mov xmm6, draw_ship_lx1
		mul xmm6, draw_ship_s
		mov xmm7, draw_ship_ly1
		mul xmm7, draw_ship_c
		add xmm6, xmm7
		add xmm0, xmm6
		invoke trunc, xmm0
		return xmm8
		mov draw_ship_y1, xmm8
		load xmm0, the_ship, 0, 1
		mov xmm9, draw_ship_lx2
		mul xmm9, draw_ship_c
		mov xmm10, draw_ship_ly2
		mul xmm10, draw_ship_s
		sub xmm9, xmm10
		add xmm0, xmm9
		invoke trunc, xmm0
		return xmm11
		mov draw_ship_x2, xmm11
		load xmm0, the_ship, 8, 1
		mov xmm12, draw_ship_lx2
		mul xmm12, draw_ship_s
		mov xmm13, draw_ship_ly2
		mul xmm13, draw_ship_c
		add xmm12, xmm13
		add xmm0, xmm12
		invoke trunc, xmm0
		return xmm14
		mov draw_ship_y2, xmm14
		load xmm0, the_ship, 0, 1
		mov xmm15, draw_ship_lx3
		mul xmm15, draw_ship_c
		mov xmm15, draw_ship_ly3
		mul xmm15, draw_ship_s
		sub xmm15, xmm15
		add xmm0, xmm15
		invoke trunc, xmm0
		return xmm15
		mov draw_ship_x3, xmm15
		load xmm0, the_ship, 8, 1
		mov xmm15, draw_ship_lx3
		mul xmm15, draw_ship_s
		mov xmm15, draw_ship_ly3
		mul xmm15, draw_ship_c
		add xmm15, xmm15
		add xmm0, xmm15
		invoke trunc, xmm0
		return xmm15
		mov draw_ship_y3, xmm15
		invoke set_draw_color, renderer, 255, 255, 255, 255
		invoke draw_line, renderer, draw_ship_x1, draw_ship_y1, draw_ship_x2, draw_ship_y2
		invoke draw_line, renderer, draw_ship_x2, draw_ship_y2, draw_ship_x3, draw_ship_y3
		invoke draw_line, renderer, draw_ship_x3, draw_ship_y3, draw_ship_x1, draw_ship_y1
		cmp keyThrust, 0
		je ELSE_48
		invoke set_draw_color, renderer, 255, 160, 0, 255
		load xmm0, the_ship, 0, 1
		mov rdx, 0
		sub rdx, 4
		mov xmm15, rdx
		mul xmm15, draw_ship_c
		mov xmm15, 8
		mul xmm15, draw_ship_s
		sub xmm15, xmm15
		add xmm0, xmm15
		invoke trunc, xmm0
		return xmm15
		mov draw_ship_x1, xmm15
		load xmm0, the_ship, 8, 1
		mov rsi, 0
		sub rsi, 4
		mov xmm15, rsi
		mul xmm15, draw_ship_s
		mov xmm15, 8
		mul xmm15, draw_ship_c
		add xmm15, xmm15
		add xmm0, xmm15
		invoke trunc, xmm0
		return xmm15
		mov draw_ship_y1, xmm15
		load xmm0, the_ship, 0, 1
		mov xmm15, 0
		mul xmm15, draw_ship_c
		mov xmm15, 16
		mul xmm15, draw_ship_s
		sub xmm15, xmm15
		add xmm0, xmm15
		invoke trunc, xmm0
		return xmm15
		mov draw_ship_x2, xmm15
		load xmm0, the_ship, 8, 1
		mov xmm15, 0
		mul xmm15, draw_ship_s
		mov xmm15, 16
		mul xmm15, draw_ship_c
		add xmm15, xmm15
		add xmm0, xmm15
		invoke trunc, xmm0
		return xmm15
		mov draw_ship_y2, xmm15
		load xmm0, the_ship, 0, 1
		mov xmm15, 4
		mul xmm15, draw_ship_c
		mov xmm15, 8
		mul xmm15, draw_ship_s
		sub xmm15, xmm15
		add xmm0, xmm15
		invoke trunc, xmm0
		return xmm15
		mov draw_ship_x3, xmm15
		load xmm0, the_ship, 8, 1
		mov xmm15, 4
		mul xmm15, draw_ship_s
		mov xmm15, 8
		mul xmm15, draw_ship_c
		add xmm15, xmm15
		add xmm0, xmm15
		invoke trunc, xmm0
		return xmm15
		mov draw_ship_y3, xmm15
		invoke draw_line, renderer, draw_ship_x1, draw_ship_y1, draw_ship_x2, draw_ship_y2
		invoke draw_line, renderer, draw_ship_x2, draw_ship_y2, draw_ship_x3, draw_ship_y3
		jmp ENDIF_49
	ELSE_48:
	ENDIF_49:
	PROC_END_draw_ship:
		ret
	function PROC_update_ship:
		cmp keyLeft, 0
		je ELSE_50
		load xmm0, the_ship, 32, 1
		mov xmm1, real_const_3
		sub xmm0, xmm1
		store xmm0, the_ship, 32, 1
		jmp ENDIF_51
	ELSE_50:
	ENDIF_51:
		cmp keyRight, 0
		je ELSE_52
		load xmm2, the_ship, 32, 1
		mov xmm3, real_const_3
		add xmm2, xmm3
		store xmm2, the_ship, 32, 1
		jmp ENDIF_53
	ELSE_52:
	ENDIF_53:
		mov xmm4, real_const_4
		mov update_ship_accel, xmm4
		cmp keyThrust, 0
		je ELSE_54
		load xmm5, the_ship, 16, 1
		load xmm6, the_ship, 32, 1
		invoke sin, xmm6
		return xmm7
		mul xmm7, update_ship_accel
		add xmm5, xmm7
		store xmm5, the_ship, 16, 1
		load xmm6, the_ship, 24, 1
		load xmm8, the_ship, 32, 1
		invoke cos, xmm8
		return xmm9
		mul xmm9, update_ship_accel
		sub xmm6, xmm9
		store xmm6, the_ship, 24, 1
		jmp ENDIF_55
	ELSE_54:
	ENDIF_55:
		mov xmm8, real_const_5
		mov update_ship_drag, xmm8
		load xmm10, the_ship, 16, 1
		mul xmm10, update_ship_drag
		store xmm10, the_ship, 16, 1
		load xmm11, the_ship, 24, 1
		mul xmm11, update_ship_drag
		store xmm11, the_ship, 24, 1
		load xmm12, the_ship, 0, 1
		load xmm13, the_ship, 16, 1
		add xmm12, xmm13
		store xmm12, the_ship, 0, 1
		load xmm14, the_ship, 8, 1
		load xmm15, the_ship, 24, 1
		add xmm14, xmm15
		store xmm14, the_ship, 8, 1
		load xmm15, the_ship, 0, 1
		mov rcx, xmm15
		cmp rcx, 0
		jl CMP_TRUE_58
		mov rbx, 0
		jmp CMP_END_59
	CMP_TRUE_58:
		mov rbx, 1
	CMP_END_59:
		cmp rbx, 0
		je ELSE_56
		load xmm15, the_ship, 0, 1
		add xmm15, 640
		store xmm15, the_ship, 0, 1
		jmp ENDIF_57
	ELSE_56:
	ENDIF_57:
		load xmm15, the_ship, 0, 1
		mov rdx, xmm15
		cmp rdx, 640
		jge CMP_TRUE_62
		mov rcx, 0
		jmp CMP_END_63
	CMP_TRUE_62:
		mov rcx, 1
	CMP_END_63:
		cmp rcx, 0
		je ELSE_60
		load xmm15, the_ship, 0, 1
		sub xmm15, 640
		store xmm15, the_ship, 0, 1
		jmp ENDIF_61
	ELSE_60:
	ENDIF_61:
		load xmm15, the_ship, 8, 1
		mov rsi, xmm15
		cmp rsi, 0
		jl CMP_TRUE_66
		mov rdx, 0
		jmp CMP_END_67
	CMP_TRUE_66:
		mov rdx, 1
	CMP_END_67:
		cmp rdx, 0
		je ELSE_64
		load xmm15, the_ship, 8, 1
		add xmm15, 360
		store xmm15, the_ship, 8, 1
		jmp ENDIF_65
	ELSE_64:
	ENDIF_65:
		load xmm15, the_ship, 8, 1
		mov rdi, xmm15
		cmp rdi, 360
		jge CMP_TRUE_70
		mov rsi, 0
		jmp CMP_END_71
	CMP_TRUE_70:
		mov rsi, 1
	CMP_END_71:
		cmp rsi, 0
		je ELSE_68
		load xmm15, the_ship, 8, 1
		sub xmm15, 360
		store xmm15, the_ship, 8, 1
		jmp ENDIF_69
	ELSE_68:
	ENDIF_69:
	PROC_END_update_ship:
		ret
	function PROC_render:
		invoke set_render_target, renderer, target_id
		invoke set_draw_color, renderer, 0, 0, 0, 255
		invoke clear, renderer
		call PROC_draw_ship
	PROC_END_render:
		ret
	function PROC_init:
		mov init_title, arg0
		mov init_xval, rbx
		mov init_yval, rcx
		mov init_wval, rdx
		mov init_hval, rsi
		invoke init
		return rbx
		mov init_result, rbx
		cmp init_result, 0
		jne CMP_TRUE_74
		mov rcx, 0
		jmp CMP_END_75
	CMP_TRUE_74:
		mov rcx, 1
	CMP_END_75:
		cmp rcx, 0
		je ELSE_72
		print fmt_str, str_2
		print newline
		exit 1
		jmp ENDIF_73
	ELSE_72:
	ENDIF_73:
		invoke create_window, title, init_xval, init_yval, init_wval, init_hval, 4
		return rdx
		mov window_id, rdx
		mov rsi, 0
		sub rsi, 1
		mov r8, rsi
		cmp window_id, r8
		je CMP_TRUE_78
		mov rdi, 0
		jmp CMP_END_79
	CMP_TRUE_78:
		mov rdi, 1
	CMP_END_79:
		cmp rdi, 0
		je ELSE_76
		print fmt_str, str_3
		print newline
		invoke quit
		exit 1
		jmp ENDIF_77
	ELSE_76:
	ENDIF_77:
		mov r8, 0
		sub r8, 1
		invoke create_renderer, window_id, r8, 2
		return r9
		mov renderer, r9
		mov r8, 0
		sub r8, 1
		mov r10, r8
		cmp renderer, r10
		je CMP_TRUE_82
		mov r9, 0
		jmp CMP_END_83
	CMP_TRUE_82:
		mov r9, 1
	CMP_END_83:
		cmp r9, 0
		je ELSE_80
		print fmt_str, str_4
		print newline
		invoke destroy_window, window_id
		invoke quit
		exit 1
		jmp ENDIF_81
	ELSE_80:
	ENDIF_81:
		invoke create_render_target, renderer, 640, 360
		return r9
		mov target_id, r9
		mov r9, 0
		sub r9, 1
		mov r11, r9
		cmp target_id, r11
		je CMP_TRUE_86
		mov r10, 0
		jmp CMP_END_87
	CMP_TRUE_86:
		mov r10, 1
	CMP_END_87:
		cmp r10, 0
		je ELSE_84
		print fmt_str, str_5
		print newline
		invoke destroy_renderer, renderer
		invoke destroy_window, window_id
		invoke quit
		exit 1
		jmp ENDIF_85
	ELSE_84:
	ENDIF_85:
		invoke init_text
		return r9
		mov r11, r9
		cmp r11, 1
		jne CMP_TRUE_90
		mov r10, 0
		jmp CMP_END_91
	CMP_TRUE_90:
		mov r10, 1
	CMP_END_91:
		cmp r10, 0
		je ELSE_88
		print fmt_str, str_6
		print newline
		exit 1
		jmp ENDIF_89
	ELSE_88:
	ENDIF_89:
		invoke load_font, filename, 16
		return r9
		mov font_id, r9
		mov r9, 0
		sub r9, 1
		mov r11, r9
		cmp font_id, r11
		je CMP_TRUE_94
		mov r10, 0
		jmp CMP_END_95
	CMP_TRUE_94:
		mov r10, 1
	CMP_END_95:
		cmp r10, 0
		je ELSE_92
		print fmt_str, str_7
		print fmt_str, filename
		print newline
		exit 1
		jmp ENDIF_93
	ELSE_92:
	ENDIF_93:
		mov r9, 0
		mov keyLeft, r9
		mov r9, 0
		mov keyRight, r9
		mov r9, 0
		mov keyThrust, r9
		call PROC_init_space
	PROC_END_init:
		ret
	function PROC_cleanup:
		invoke destroy_render_target, target_id
		invoke destroy_renderer, renderer
		invoke destroy_window, window_id
		invoke quit_text
		invoke quit
	PROC_END_cleanup:
		ret
	}
}

