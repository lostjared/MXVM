program Asteroids {
	section module {
 		sdl,
		std,
		string
	}
	section data {
		int rax = 0
		int rbx = 0
		int rcx = 0
		int rdx = 0
		int rsi = 0
		int rdi = 0
		int r8 = 0
		int r9 = 0
		int r10 = 0
		int r11 = 0
		int r12 = 0
		int r13 = 0
		int r14 = 0
		int r15 = 0
		float xmm0 = 0.0
		float xmm1 = 0.0
		float xmm2 = 0.0
		float xmm3 = 0.0
		float xmm4 = 0.0
		float xmm5 = 0.0
		float xmm6 = 0.0
		float xmm7 = 0.0
		float xmm8 = 0.0
		float xmm9 = 0.0
		ptr _tmpptr0 = null
		ptr _tmpptr1 = null
		ptr _tmpptr10 = null
		ptr _tmpptr11 = null
		ptr _tmpptr12 = null
		ptr _tmpptr13 = null
		ptr _tmpptr14 = null
		ptr _tmpptr15 = null
		ptr _tmpptr16 = null
		ptr _tmpptr17 = null
		ptr _tmpptr18 = null
		ptr _tmpptr19 = null
		ptr _tmpptr2 = null
		ptr _tmpptr20 = null
		ptr _tmpptr21 = null
		ptr _tmpptr22 = null
		ptr _tmpptr23 = null
		ptr _tmpptr24 = null
		ptr _tmpptr25 = null
		ptr _tmpptr26 = null
		ptr _tmpptr27 = null
		ptr _tmpptr28 = null
		ptr _tmpptr29 = null
		ptr _tmpptr3 = null
		ptr _tmpptr30 = null
		ptr _tmpptr31 = null
		ptr _tmpptr32 = null
		ptr _tmpptr33 = null
		ptr _tmpptr34 = null
		ptr _tmpptr35 = null
		ptr _tmpptr36 = null
		ptr _tmpptr37 = null
		ptr _tmpptr38 = null
		ptr _tmpptr39 = null
		ptr _tmpptr4 = null
		ptr _tmpptr40 = null
		ptr _tmpptr41 = null
		ptr _tmpptr42 = null
		ptr _tmpptr43 = null
		ptr _tmpptr44 = null
		ptr _tmpptr45 = null
		ptr _tmpptr46 = null
		ptr _tmpptr47 = null
		ptr _tmpptr48 = null
		ptr _tmpptr49 = null
		ptr _tmpptr5 = null
		ptr _tmpptr50 = null
		ptr _tmpptr51 = null
		ptr _tmpptr52 = null
		ptr _tmpptr53 = null
		ptr _tmpptr54 = null
		ptr _tmpptr6 = null
		ptr _tmpptr7 = null
		ptr _tmpptr8 = null
		ptr _tmpptr9 = null
		ptr arg0 = null
		float real_const_15 = 1000.0
		float real_const_13 = 0.12
		float real_const_4 = 14.0
		float real_const_1 = 0.8
		float real_const_12 = 0.06
		float real_const_16 = 0.65
		float real_const_2 = 6.28318
		float real_const_0 = 0.0
		float real_const_3 = 0.02
		float real_const_5 = 34.0
		float real_const_11 = 8.0
		float real_const_10 = 6.0
		float real_const_7 = 180.000000
		float real_const_6 = 320.000000
		float real_const_9 = 10.0
		float real_const_17 = 0.700000
		float real_const_14 = 0.995
		float real_const_8 = 1.570796
		string str_0 = "Asteroids"
		string str_1 = "font.ttf"
		string str_2 = "Lives: "
		string str_3 = "Score: "
		string str_4 = "failed to init SDL"
		string str_5 = "Could not create window"
		string str_6 = "could not create renderer"
		string str_7 = "could not create render target"
		string str_8 = "Font subsystem failed to load"
		string str_9 = "failed to open: "
		string fmt_str = "%s "
		string newline = "\n"
		ptr title = null
		ptr filename = null
		int running = 0
		int event_type_result = 0
		int window_id = 0
		int renderer = 0
		int target_id = 0
		int font_id = 0
		int key = 0
		ptr ship_pos = null
		ptr ship_vel = null
		float ship_angle = 0.0
		int thrust_on = 0
		ptr ast = null
		int lives = 0
		int score = 0
		ptr wrap_point_p = null
		int make_asteroid_i = 0
		int reset_game_i = 0
		ptr draw_ship_p0 = null
		ptr draw_ship_p1 = null
		ptr draw_ship_p2 = null
		float draw_ship_c = 0.0
		float draw_ship_s = 0.0
		int draw_ship_x0 = 0
		int draw_ship_y0 = 0
		int draw_ship_x1 = 0
		int draw_ship_y1 = 0
		int draw_ship_x2 = 0
		int draw_ship_y2 = 0
		int draw_asteroid_i = 0
		int draw_asteroid_n = 0
		int draw_asteroid_k = 0
		float draw_asteroid_a0 = 0.0
		float draw_asteroid_a1 = 0.0
		float draw_asteroid_step = 0.0
		float draw_asteroid_r0 = 0.0
		float draw_asteroid_r1 = 0.0
		int draw_asteroid_x0 = 0
		int draw_asteroid_y0 = 0
		int draw_asteroid_x1 = 0
		int draw_asteroid_y1 = 0
		float update_ship_accel = 0.0
		int update_asteroids_i = 0
		int check_collisions_i = 0
		int render_i = 0
		ptr init_title = null
		int init_xval = 0
		int init_yval = 0
		int init_wval = 0
		int init_hval = 0
		int init_result = 0
		float frand_a = 0.0
		float frand_b = 0.0
		int mix_seed = 0
		int mix_idx = 0
		int mix_v = 0
		int jagged_scale_seed = 0
		int jagged_scale_idx = 0
		int jagged_scale_h = 0
		float jagged_scale_t = 0.0
		float dist2_ax = 0.0
		float dist2_ay = 0.0
		float dist2_bx = 0.0
		float dist2_by = 0.0
		float dist2_dx = 0.0
		float dist2_dy = 0.0
	}
	section code {
	start:
		mov title, str_0
		mov filename, str_1
		alloc ship_pos, 8, 16
		alloc ship_vel, 8, 16
		alloc ast, 8, 8
		mov arg0, title
		mov rbx, 100
		mov rcx, 100
		mov rdx, 1280
		mov rsi, 720
		call PROC_init
		mov rbx, 1
		mov running, rbx
	WHILE_0:
		mov rcx, 1
		mov rsi, rcx
		cmp running, rsi
		je CMP_TRUE_2
		mov rdx, 0
		jmp CMP_END_3
	CMP_TRUE_2:
		mov rdx, 1
	CMP_END_3:
		cmp rdx, 0
		je ENDWHILE_1
	WHILE_4:
		invoke poll_event
		return rsi
		mov r8, rsi
		cmp r8, 0
		jne CMP_TRUE_6
		mov rdi, 0
		jmp CMP_END_7
	CMP_TRUE_6:
		mov rdi, 1
	CMP_END_7:
		cmp rdi, 0
		je ENDWHILE_5
		invoke get_event_type
		return r8
		mov event_type_result, r8
		cmp event_type_result, 256
		je CMP_TRUE_10
		mov r9, 0
		jmp CMP_END_11
	CMP_TRUE_10:
		mov r9, 1
	CMP_END_11:
		cmp r9, 0
		je ELSE_8
		mov r9, 0
		mov running, r9
		jmp ENDIF_9
	ELSE_8:
	ENDIF_9:
		cmp event_type_result, 768
		je CMP_TRUE_14
		mov r9, 0
		jmp CMP_END_15
	CMP_TRUE_14:
		mov r9, 1
	CMP_END_15:
		cmp r9, 0
		je ELSE_12
		invoke get_key_code
		return r9
		mov key, r9
		cmp key, 27
		je CMP_TRUE_18
		mov r9, 0
		jmp CMP_END_19
	CMP_TRUE_18:
		mov r9, 1
	CMP_END_19:
		cmp r9, 0
		je ELSE_16
		mov r9, 0
		mov running, r9
		jmp ENDIF_17
	ELSE_16:
	ENDIF_17:
		jmp ENDIF_13
	ELSE_12:
	ENDIF_13:
		jmp WHILE_4
	ENDWHILE_5:
		cmp lives, 0
		jle CMP_TRUE_22
		mov r9, 0
		jmp CMP_END_23
	CMP_TRUE_22:
		mov r9, 1
	CMP_END_23:
		cmp r9, 0
		je ELSE_20
		jmp ENDIF_21
	ELSE_20:
	ENDIF_21:
		call PROC_update_input
		call PROC_update_ship
		call PROC_update_asteroids
		call PROC_check_collisions
		call PROC_render
		invoke present_scaled, renderer, target_id, 1280, 720
		invoke delay, 16
		jmp WHILE_0
	ENDWHILE_1:
		call PROC_cleanup
		free ast
		free ship_pos
		free ship_vel
		done
	function PROC_wrap_point:
		mov wrap_point_p, arg0
		load xmm0, wrap_point_p, 0, 8
		mov rcx, xmm0
		cmp rcx, 0
		jl CMP_TRUE_26
		mov rbx, 0
		jmp CMP_END_27
	CMP_TRUE_26:
		mov rbx, 1
	CMP_END_27:
		cmp rbx, 0
		je ELSE_24
		load xmm1, wrap_point_p, 0, 8
		add xmm1, 640
		to_int rcx, xmm1
		store rcx, wrap_point_p, 0, 8
		jmp ENDIF_25
	ELSE_24:
	ENDIF_25:
		load xmm2, wrap_point_p, 0, 8
		mov rsi, xmm2
		cmp rsi, 640
		jge CMP_TRUE_30
		mov rdx, 0
		jmp CMP_END_31
	CMP_TRUE_30:
		mov rdx, 1
	CMP_END_31:
		cmp rdx, 0
		je ELSE_28
		load xmm3, wrap_point_p, 0, 8
		sub xmm3, 640
		to_int rsi, xmm3
		store rsi, wrap_point_p, 0, 8
		jmp ENDIF_29
	ELSE_28:
	ENDIF_29:
		load xmm4, wrap_point_p, 8, 8
		mov r8, xmm4
		cmp r8, 0
		jl CMP_TRUE_34
		mov rdi, 0
		jmp CMP_END_35
	CMP_TRUE_34:
		mov rdi, 1
	CMP_END_35:
		cmp rdi, 0
		je ELSE_32
		load xmm5, wrap_point_p, 8, 8
		add xmm5, 360
		to_int r8, xmm5
		store r8, wrap_point_p, 8, 8
		jmp ENDIF_33
	ELSE_32:
	ENDIF_33:
		load xmm6, wrap_point_p, 8, 8
		mov r10, xmm6
		cmp r10, 360
		jge CMP_TRUE_38
		mov r9, 0
		jmp CMP_END_39
	CMP_TRUE_38:
		mov r9, 1
	CMP_END_39:
		cmp r9, 0
		je ELSE_36
		load xmm7, wrap_point_p, 8, 8
		sub xmm7, 360
		to_int r9, xmm7
		store r9, wrap_point_p, 8, 8
		jmp ENDIF_37
	ELSE_36:
	ENDIF_37:
	PROC_END_wrap_point:
		ret
	function PROC_make_asteroid:
		mov make_asteroid_i, rbx
		mov xmm0, real_const_0
		mov rbx, 640
		call FUNC_frand
		mov xmm1, xmm0
		mov rbx, make_asteroid_i
		mov rcx, rbx
		cmp rcx, 0
		jl IDX_OOB_41
		cmp rcx, 7
		jg IDX_OOB_41
		jmp IDX_OK_40
	IDX_OOB_41:
		exit 1
	IDX_OK_40:
		mov rdx, make_asteroid_i
		load arg0, ast, rdx, 72
		mov _tmpptr0, arg0
		to_int rdx, xmm1
		store rdx, _tmpptr0, 0, 8
		mov xmm2, real_const_0
		mov xmm0, xmm2
		mov rbx, 360
		call FUNC_frand
		mov xmm3, xmm0
		mov rsi, make_asteroid_i
		mov rdi, rsi
		cmp rdi, 0
		jl IDX_OOB_43
		cmp rdi, 7
		jg IDX_OOB_43
		jmp IDX_OK_42
	IDX_OOB_43:
		exit 1
	IDX_OK_42:
		mov r8, make_asteroid_i
		load arg0, ast, r8, 72
		mov _tmpptr1, arg0
		to_int r8, xmm3
		store r8, _tmpptr1, 8, 8
		mov xmm4, real_const_1
		mov r9, 0
		sub r9, xmm4
		mov rbx, r9
		mov xmm5, real_const_1
		mov xmm0, xmm5
		call FUNC_frand
		mov xmm6, xmm0
		mov r9, make_asteroid_i
		mov r10, r9
		cmp r10, 0
		jl IDX_OOB_45
		cmp r10, 7
		jg IDX_OOB_45
		jmp IDX_OK_44
	IDX_OOB_45:
		exit 1
	IDX_OK_44:
		mov r9, make_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr2, arg0
		to_int r9, xmm6
		store r9, _tmpptr2, 16, 8
		mov xmm7, real_const_1
		mov r9, 0
		sub r9, xmm7
		mov rbx, r9
		mov xmm8, real_const_1
		mov xmm0, xmm8
		call FUNC_frand
		mov xmm9, xmm0
		mov r9, make_asteroid_i
		mov r11, r9
		cmp r11, 0
		jl IDX_OOB_47
		cmp r11, 7
		jg IDX_OOB_47
		jmp IDX_OK_46
	IDX_OOB_47:
		exit 1
	IDX_OK_46:
		mov r9, make_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr3, arg0
		to_int r9, xmm9
		store r9, _tmpptr3, 24, 8
		mov xmm9, real_const_0
		mov xmm0, xmm9
		mov xmm9, real_const_2
		mov xmm1, xmm9
		call FUNC_frand
		mov xmm9, xmm0
		mov r9, make_asteroid_i
		mov r12, r9
		cmp r12, 0
		jl IDX_OOB_49
		cmp r12, 7
		jg IDX_OOB_49
		jmp IDX_OK_48
	IDX_OOB_49:
		exit 1
	IDX_OK_48:
		mov r9, make_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr4, arg0
		to_int r9, xmm9
		store r9, _tmpptr4, 32, 8
		mov xmm9, real_const_3
		mov r9, 0
		sub r9, xmm9
		mov rbx, r9
		mov xmm9, real_const_3
		mov xmm0, xmm9
		call FUNC_frand
		mov xmm9, xmm0
		mov r9, make_asteroid_i
		mov r13, r9
		cmp r13, 0
		jl IDX_OOB_51
		cmp r13, 7
		jg IDX_OOB_51
		jmp IDX_OK_50
	IDX_OOB_51:
		exit 1
	IDX_OK_50:
		mov r9, make_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr5, arg0
		to_int r9, xmm9
		store r9, _tmpptr5, 40, 8
		mov xmm9, real_const_4
		mov xmm0, xmm9
		mov xmm9, real_const_5
		mov xmm1, xmm9
		call FUNC_frand
		mov xmm9, xmm0
		mov r9, make_asteroid_i
		mov r14, r9
		cmp r14, 0
		jl IDX_OOB_53
		cmp r14, 7
		jg IDX_OOB_53
		jmp IDX_OK_52
	IDX_OOB_53:
		exit 1
	IDX_OK_52:
		mov r9, make_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr6, arg0
		to_int r9, xmm9
		store r9, _tmpptr6, 48, 8
		invoke rand
		return r9
		mod r9, 5
		mov r15, 8
		add r15, r9
		mov r9, make_asteroid_i
		mov r10, r9
		cmp r10, 0
		jl IDX_OOB_55
		cmp r10, 7
		jg IDX_OOB_55
		jmp IDX_OK_54
	IDX_OOB_55:
		exit 1
	IDX_OK_54:
		mov r9, make_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr7, arg0
		store r15, _tmpptr7, 56, 8
		invoke rand
		return r9
		mov r15, make_asteroid_i
		mov r11, r15
		cmp r11, 0
		jl IDX_OOB_57
		cmp r11, 7
		jg IDX_OOB_57
		jmp IDX_OK_56
	IDX_OOB_57:
		exit 1
	IDX_OK_56:
		mov r15, make_asteroid_i
		load arg0, ast, r15, 72
		mov _tmpptr8, arg0
		store r9, _tmpptr8, 64, 8
	PROC_END_make_asteroid:
		ret
	function PROC_reset_game:
		store real_const_6, ship_pos, 0, 8
		store real_const_7, ship_pos, 8, 8
		mov xmm0, real_const_0
		to_int rbx, xmm0
		store rbx, ship_vel, 0, 8
		mov xmm1, real_const_0
		to_int rcx, xmm1
		store rcx, ship_vel, 8, 8
		mov xmm2, real_const_8
		mov rdx, 0
		sub rdx, xmm2
		to_float xmm3, rdx
		mov ship_angle, xmm3
		mov thrust_on, 0
		mov reset_game_i, 0
	FOR_58:
		mov rsi, 7
		cmp reset_game_i, rsi
		jg ENDFOR_59
		mov rbx, reset_game_i
		call PROC_make_asteroid
		add reset_game_i, 1
		jmp FOR_58
	ENDFOR_59:
		mov lives, 3
		mov score, 0
	PROC_END_reset_game:
		ret
	function PROC_draw_ship:
		alloc draw_ship_p0, 8, 16
		alloc draw_ship_p1, 8, 16
		alloc draw_ship_p2, 8, 16
		mov xmm0, ship_angle
		invoke cos, xmm0
		return xmm1
		mov draw_ship_c, xmm1
		mov xmm0, ship_angle
		invoke sin, xmm0
		return xmm2
		mov draw_ship_s, xmm2
		load xmm0, ship_pos, 0, 8
		mov xmm3, real_const_0
		mul xmm3, draw_ship_c
		mov xmm4, real_const_9
		mov rbx, 0
		sub rbx, xmm4
		mov rcx, rbx
		mul rcx, draw_ship_s
		sub xmm3, rcx
		add xmm0, xmm3
		to_int rdx, xmm0
		store rdx, draw_ship_p0, 0, 8
		load xmm5, ship_pos, 8, 8
		mov xmm6, real_const_0
		mul xmm6, draw_ship_s
		mov xmm7, real_const_9
		mov rsi, 0
		sub rsi, xmm7
		mov rdi, rsi
		mul rdi, draw_ship_c
		add xmm6, rdi
		add xmm5, xmm6
		to_int r8, xmm5
		store r8, draw_ship_p0, 8, 8
		load xmm8, ship_pos, 0, 8
		mov xmm9, real_const_10
		mul xmm9, draw_ship_c
		mov xmm9, real_const_11
		mul xmm9, draw_ship_s
		sub xmm9, xmm9
		add xmm8, xmm9
		to_int r9, xmm8
		store r9, draw_ship_p1, 0, 8
		load xmm9, ship_pos, 8, 8
		mov xmm9, real_const_10
		mul xmm9, draw_ship_s
		mov xmm9, real_const_11
		mul xmm9, draw_ship_c
		add xmm9, xmm9
		add xmm9, xmm9
		to_int r9, xmm9
		store r9, draw_ship_p1, 8, 8
		load xmm9, ship_pos, 0, 8
		mov xmm9, real_const_10
		mul xmm9, draw_ship_c
		mov r9, 0
		sub r9, xmm9
		mov xmm9, real_const_11
		mul xmm9, draw_ship_s
		sub r9, xmm9
		add xmm9, r9
		to_int r9, xmm9
		store r9, draw_ship_p2, 0, 8
		load xmm9, ship_pos, 8, 8
		mov xmm9, real_const_10
		mul xmm9, draw_ship_s
		mov r9, 0
		sub r9, xmm9
		mov xmm9, real_const_11
		mul xmm9, draw_ship_c
		add r9, xmm9
		add xmm9, r9
		to_int r9, xmm9
		store r9, draw_ship_p2, 8, 8
		load xmm9, draw_ship_p0, 0, 8
		invoke trunc, xmm9
		return xmm9
		mov draw_ship_x0, xmm9
		load xmm9, draw_ship_p0, 8, 8
		invoke trunc, xmm9
		return xmm9
		mov draw_ship_y0, xmm9
		load xmm9, draw_ship_p1, 0, 8
		invoke trunc, xmm9
		return xmm9
		mov draw_ship_x1, xmm9
		load xmm9, draw_ship_p1, 8, 8
		invoke trunc, xmm9
		return xmm9
		mov draw_ship_y1, xmm9
		load xmm9, draw_ship_p2, 0, 8
		invoke trunc, xmm9
		return xmm9
		mov draw_ship_x2, xmm9
		load xmm9, draw_ship_p2, 8, 8
		invoke trunc, xmm9
		return xmm9
		mov draw_ship_y2, xmm9
		invoke draw_line, renderer, draw_ship_x0, draw_ship_y0, draw_ship_x1, draw_ship_y1
		invoke draw_line, renderer, draw_ship_x1, draw_ship_y1, draw_ship_x2, draw_ship_y2
		invoke draw_line, renderer, draw_ship_x2, draw_ship_y2, draw_ship_x0, draw_ship_y0
	PROC_END_draw_ship:
		ret
	function PROC_draw_asteroid:
		mov draw_asteroid_i, rbx
		mov rcx, rbx
		cmp rcx, 0
		jl IDX_OOB_61
		cmp rcx, 7
		jg IDX_OOB_61
		jmp IDX_OK_60
	IDX_OOB_61:
		exit 1
	IDX_OK_60:
		mov rdx, draw_asteroid_i
		load arg0, ast, rdx, 72
		mov _tmpptr9, arg0
		load rdx, _tmpptr9, 0, 8
		mov draw_asteroid_n, rdx
		cmp draw_asteroid_n, 3
		jl CMP_TRUE_64
		mov rsi, 0
		jmp CMP_END_65
	CMP_TRUE_64:
		mov rsi, 1
	CMP_END_65:
		cmp rsi, 0
		je ELSE_62
		mov draw_asteroid_n, 3
		jmp ENDIF_63
	ELSE_62:
	ENDIF_63:
		mov xmm0, real_const_2
		div xmm0, draw_asteroid_n
		mov draw_asteroid_step, xmm0
		mov rdi, draw_asteroid_n
		sub rdi, 1
		mov draw_asteroid_k, 0
	FOR_66:
		mov r8, rdi
		cmp draw_asteroid_k, r8
		jg ENDFOR_67
		mov r9, draw_asteroid_i
		mov r10, r9
		cmp r10, 0
		jl IDX_OOB_69
		cmp r10, 7
		jg IDX_OOB_69
		jmp IDX_OK_68
	IDX_OOB_69:
		exit 1
	IDX_OK_68:
		mov r9, draw_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr10, arg0
		load r9, _tmpptr10, 0, 8
		mov r11, draw_asteroid_step
		mul r11, draw_asteroid_k
		add r9, r11
		mov draw_asteroid_a0, r9
		mov r9, draw_asteroid_i
		mov r11, r9
		cmp r11, 0
		jl IDX_OOB_71
		cmp r11, 7
		jg IDX_OOB_71
		jmp IDX_OK_70
	IDX_OOB_71:
		exit 1
	IDX_OK_70:
		mov r9, draw_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr11, arg0
		load r9, _tmpptr11, 0, 8
		mov r12, draw_asteroid_k
		add r12, 1
		mod r12, draw_asteroid_n
		mov r13, draw_asteroid_step
		mul r13, r12
		add r9, r13
		mov draw_asteroid_a1, r9
		mov r9, draw_asteroid_i
		mov r12, r9
		cmp r12, 0
		jl IDX_OOB_73
		cmp r12, 7
		jg IDX_OOB_73
		jmp IDX_OK_72
	IDX_OOB_73:
		exit 1
	IDX_OK_72:
		mov r9, draw_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr12, arg0
		load r9, _tmpptr12, 0, 8
		mov r13, draw_asteroid_i
		mov r14, r13
		cmp r14, 0
		jl IDX_OOB_75
		cmp r14, 7
		jg IDX_OOB_75
		jmp IDX_OK_74
	IDX_OOB_75:
		exit 1
	IDX_OK_74:
		mov r13, draw_asteroid_i
		load arg0, ast, r13, 72
		mov _tmpptr13, arg0
		load r13, _tmpptr13, 0, 8
		mov rbx, r13
		mov rcx, draw_asteroid_k
		call FUNC_jagged_scale
		mov xmm1, xmm0
		mul r9, xmm1
		mov draw_asteroid_r0, r9
		mov r9, draw_asteroid_i
		mov r13, r9
		cmp r13, 0
		jl IDX_OOB_77
		cmp r13, 7
		jg IDX_OOB_77
		jmp IDX_OK_76
	IDX_OOB_77:
		exit 1
	IDX_OK_76:
		mov r9, draw_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr14, arg0
		load r9, _tmpptr14, 0, 8
		mov r15, draw_asteroid_i
		mov r12, r15
		cmp r12, 0
		jl IDX_OOB_79
		cmp r12, 7
		jg IDX_OOB_79
		jmp IDX_OK_78
	IDX_OOB_79:
		exit 1
	IDX_OK_78:
		mov r15, draw_asteroid_i
		load arg0, ast, r15, 72
		mov _tmpptr15, arg0
		load r15, _tmpptr15, 0, 8
		mov rbx, r15
		mov r13, draw_asteroid_k
		add r13, 1
		mod r13, draw_asteroid_n
		mov rcx, r13
		call FUNC_jagged_scale
		mov xmm2, xmm0
		mul r9, xmm2
		mov draw_asteroid_r1, r9
		mov r9, draw_asteroid_i
		mov r13, r9
		cmp r13, 0
		jl IDX_OOB_81
		cmp r13, 7
		jg IDX_OOB_81
		jmp IDX_OK_80
	IDX_OOB_81:
		exit 1
	IDX_OK_80:
		mov r9, draw_asteroid_i
		load arg0, ast, r9, 72
		mov _tmpptr16, arg0
		load r9, _tmpptr16, 0, 8
		mov xmm3, draw_asteroid_a0
		invoke cos, xmm3
		return xmm4
		mul xmm4, draw_asteroid_r0
		add r9, xmm4
		mov xmm3, r9
		invoke trunc, xmm3
		return xmm5
		mov draw_asteroid_x0, xmm5
		mov r15, draw_asteroid_i
		mov r14, r15
		cmp r14, 0
		jl IDX_OOB_83
		cmp r14, 7
		jg IDX_OOB_83
		jmp IDX_OK_82
	IDX_OOB_83:
		exit 1
	IDX_OK_82:
		mov r15, draw_asteroid_i
		load arg0, ast, r15, 72
		mov _tmpptr17, arg0
		load r15, _tmpptr17, 0, 8
		mov xmm3, draw_asteroid_a0
		invoke sin, xmm3
		return xmm6
		mul xmm6, draw_asteroid_r0
		add r15, xmm6
		mov xmm3, r15
		invoke trunc, xmm3
		return xmm7
		mov draw_asteroid_y0, xmm7
		mov r15, draw_asteroid_i
		mov r10, r15
		cmp r10, 0
		jl IDX_OOB_85
		cmp r10, 7
		jg IDX_OOB_85
		jmp IDX_OK_84
	IDX_OOB_85:
		exit 1
	IDX_OK_84:
		mov r15, draw_asteroid_i
		load arg0, ast, r15, 72
		mov _tmpptr18, arg0
		load r15, _tmpptr18, 0, 8
		mov xmm3, draw_asteroid_a1
		invoke cos, xmm3
		return xmm8
		mul xmm8, draw_asteroid_r1
		add r15, xmm8
		mov xmm3, r15
		invoke trunc, xmm3
		return xmm9
		mov draw_asteroid_x1, xmm9
		mov r11, draw_asteroid_i
		mov r12, r11
		cmp r12, 0
		jl IDX_OOB_87
		cmp r12, 7
		jg IDX_OOB_87
		jmp IDX_OK_86
	IDX_OOB_87:
		exit 1
	IDX_OK_86:
		mov r11, draw_asteroid_i
		load arg0, ast, r11, 72
		mov _tmpptr19, arg0
		load r11, _tmpptr19, 0, 8
		mov xmm3, draw_asteroid_a1
		invoke sin, xmm3
		return xmm9
		mul xmm9, draw_asteroid_r1
		add r11, xmm9
		mov xmm3, r11
		invoke trunc, xmm3
		return xmm9
		mov draw_asteroid_y1, xmm9
		invoke draw_line, renderer, draw_asteroid_x0, draw_asteroid_y0, draw_asteroid_x1, draw_asteroid_y1
		add draw_asteroid_k, 1
		jmp FOR_66
	ENDFOR_67:
	PROC_END_draw_asteroid:
		ret
	function PROC_update_input:
		invoke is_key_pressed, 80
		return rbx
		mov rdx, rbx
		cmp rdx, 0
		jne CMP_TRUE_90
		mov rcx, 0
		jmp CMP_END_91
	CMP_TRUE_90:
		mov rcx, 1
	CMP_END_91:
		cmp rcx, 0
		je ELSE_88
		mov xmm0, real_const_12
		mov rdx, ship_angle
		sub rdx, xmm0
		mov ship_angle, rdx
		jmp ENDIF_89
	ELSE_88:
	ENDIF_89:
		invoke is_key_pressed, 79
		return rsi
		mov r8, rsi
		cmp r8, 0
		jne CMP_TRUE_94
		mov rdi, 0
		jmp CMP_END_95
	CMP_TRUE_94:
		mov rdi, 1
	CMP_END_95:
		cmp rdi, 0
		je ELSE_92
		mov xmm1, real_const_12
		mov r8, ship_angle
		add r8, xmm1
		mov ship_angle, r8
		jmp ENDIF_93
	ELSE_92:
	ENDIF_93:
		invoke is_key_pressed, 82
		return r9
		mov thrust_on, r9
	PROC_END_update_input:
		ret
	function PROC_update_ship:
		mov xmm0, real_const_13
		mov update_ship_accel, xmm0
		cmp thrust_on, 0
		jne CMP_TRUE_98
		mov rbx, 0
		jmp CMP_END_99
	CMP_TRUE_98:
		mov rbx, 1
	CMP_END_99:
		cmp rbx, 0
		je ELSE_96
		load xmm1, ship_vel, 0, 8
		mov xmm2, ship_angle
		invoke cos, xmm2
		return xmm3
		mul xmm3, update_ship_accel
		add xmm1, xmm3
		to_int rcx, xmm1
		store rcx, ship_vel, 0, 8
		load xmm2, ship_vel, 8, 8
		mov xmm4, ship_angle
		invoke sin, xmm4
		return xmm5
		mul xmm5, update_ship_accel
		add xmm2, xmm5
		to_int rdx, xmm2
		store rdx, ship_vel, 8, 8
		jmp ENDIF_97
	ELSE_96:
	ENDIF_97:
		load xmm4, ship_vel, 0, 8
		mov xmm6, real_const_14
		mul xmm4, xmm6
		to_int rsi, xmm4
		store rsi, ship_vel, 0, 8
		load xmm7, ship_vel, 8, 8
		mov xmm8, real_const_14
		mul xmm7, xmm8
		to_int rdi, xmm7
		store rdi, ship_vel, 8, 8
		load xmm9, ship_pos, 0, 8
		load xmm9, ship_vel, 0, 8
		add xmm9, xmm9
		to_int r8, xmm9
		store r8, ship_pos, 0, 8
		load xmm9, ship_pos, 8, 8
		load xmm9, ship_vel, 8, 8
		add xmm9, xmm9
		to_int r9, xmm9
		store r9, ship_pos, 8, 8
		mov arg0, ship_pos
		call PROC_wrap_point
	PROC_END_update_ship:
		ret
	function PROC_update_asteroids:
		mov update_asteroids_i, 0
	FOR_100:
		mov rbx, 7
		cmp update_asteroids_i, rbx
		jg ENDFOR_101
		mov rcx, update_asteroids_i
		mov rdx, rcx
		cmp rdx, 0
		jl IDX_OOB_103
		cmp rdx, 7
		jg IDX_OOB_103
		jmp IDX_OK_102
	IDX_OOB_103:
		exit 1
	IDX_OK_102:
		mov rsi, update_asteroids_i
		load arg0, ast, rsi, 72
		mov _tmpptr20, arg0
		load rsi, _tmpptr20, 0, 8
		mov rdi, update_asteroids_i
		mov r8, rdi
		cmp r8, 0
		jl IDX_OOB_105
		cmp r8, 7
		jg IDX_OOB_105
		jmp IDX_OK_104
	IDX_OOB_105:
		exit 1
	IDX_OK_104:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr21, arg0
		load r9, _tmpptr21, 0, 8
		mov r10, rsi
		add r10, r9
		mov r9, update_asteroids_i
		mov r11, r9
		cmp r11, 0
		jl IDX_OOB_107
		cmp r11, 7
		jg IDX_OOB_107
		jmp IDX_OK_106
	IDX_OOB_107:
		exit 1
	IDX_OK_106:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr22, arg0
		store r10, _tmpptr22, 0, 8
		mov r9, update_asteroids_i
		mov r10, r9
		cmp r10, 0
		jl IDX_OOB_109
		cmp r10, 7
		jg IDX_OOB_109
		jmp IDX_OK_108
	IDX_OOB_109:
		exit 1
	IDX_OK_108:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr23, arg0
		load r9, _tmpptr23, 0, 8
		mov r12, update_asteroids_i
		mov r13, r12
		cmp r13, 0
		jl IDX_OOB_111
		cmp r13, 7
		jg IDX_OOB_111
		jmp IDX_OK_110
	IDX_OOB_111:
		exit 1
	IDX_OK_110:
		mov r12, update_asteroids_i
		load arg0, ast, r12, 72
		mov _tmpptr24, arg0
		load r12, _tmpptr24, 0, 8
		add r9, r12
		mov r12, update_asteroids_i
		mov r14, r12
		cmp r14, 0
		jl IDX_OOB_113
		cmp r14, 7
		jg IDX_OOB_113
		jmp IDX_OK_112
	IDX_OOB_113:
		exit 1
	IDX_OK_112:
		mov r12, update_asteroids_i
		load arg0, ast, r12, 72
		mov _tmpptr25, arg0
		store r9, _tmpptr25, 8, 8
		mov r9, update_asteroids_i
		mov r12, r9
		cmp r12, 0
		jl IDX_OOB_115
		cmp r12, 7
		jg IDX_OOB_115
		jmp IDX_OK_114
	IDX_OOB_115:
		exit 1
	IDX_OK_114:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr26, arg0
		load r9, _tmpptr26, 0, 8
		mov r15, update_asteroids_i
		mov r13, r15
		cmp r13, 0
		jl IDX_OOB_117
		cmp r13, 7
		jg IDX_OOB_117
		jmp IDX_OK_116
	IDX_OOB_117:
		exit 1
	IDX_OK_116:
		mov r15, update_asteroids_i
		load arg0, ast, r15, 72
		mov _tmpptr27, arg0
		load r15, _tmpptr27, 0, 8
		add r9, r15
		mov r15, update_asteroids_i
		mov r14, r15
		cmp r14, 0
		jl IDX_OOB_119
		cmp r14, 7
		jg IDX_OOB_119
		jmp IDX_OK_118
	IDX_OOB_119:
		exit 1
	IDX_OK_118:
		mov r15, update_asteroids_i
		load arg0, ast, r15, 72
		mov _tmpptr28, arg0
		store r9, _tmpptr28, 32, 8
		mov r9, update_asteroids_i
		mov r15, r9
		cmp r15, 0
		jl IDX_OOB_123
		cmp r15, 7
		jg IDX_OOB_123
		jmp IDX_OK_122
	IDX_OOB_123:
		exit 1
	IDX_OK_122:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr29, arg0
		load r9, _tmpptr29, 0, 8
		mov xmm0, real_const_2
		mov r10, r9
		mov r11, xmm0
		cmp r10, r11
		jg CMP_TRUE_124
		mov r15, 0
		jmp CMP_END_125
	CMP_TRUE_124:
		mov r15, 1
	CMP_END_125:
		cmp r15, 0
		je ELSE_120
		mov r9, update_asteroids_i
		mov r10, r9
		cmp r10, 0
		jl IDX_OOB_127
		cmp r10, 7
		jg IDX_OOB_127
		jmp IDX_OK_126
	IDX_OOB_127:
		exit 1
	IDX_OK_126:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr30, arg0
		load r9, _tmpptr30, 0, 8
		mov xmm1, real_const_2
		sub r9, xmm1
		mov r11, update_asteroids_i
		mov r15, r11
		cmp r15, 0
		jl IDX_OOB_129
		cmp r15, 7
		jg IDX_OOB_129
		jmp IDX_OK_128
	IDX_OOB_129:
		exit 1
	IDX_OK_128:
		mov r11, update_asteroids_i
		load arg0, ast, r11, 72
		mov _tmpptr31, arg0
		store r9, _tmpptr31, 32, 8
		jmp ENDIF_121
	ELSE_120:
	ENDIF_121:
		mov r9, update_asteroids_i
		mov r11, r9
		cmp r11, 0
		jl IDX_OOB_133
		cmp r11, 7
		jg IDX_OOB_133
		jmp IDX_OK_132
	IDX_OOB_133:
		exit 1
	IDX_OK_132:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr32, arg0
		load r9, _tmpptr32, 0, 8
		mov xmm2, real_const_0
		mov r13, r9
		mov r14, xmm2
		cmp r13, r14
		jl CMP_TRUE_134
		mov r12, 0
		jmp CMP_END_135
	CMP_TRUE_134:
		mov r12, 1
	CMP_END_135:
		cmp r12, 0
		je ELSE_130
		mov r9, update_asteroids_i
		mov r12, r9
		cmp r12, 0
		jl IDX_OOB_137
		cmp r12, 7
		jg IDX_OOB_137
		jmp IDX_OK_136
	IDX_OOB_137:
		exit 1
	IDX_OK_136:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr33, arg0
		load r9, _tmpptr33, 0, 8
		mov xmm3, real_const_2
		add r9, xmm3
		mov r13, update_asteroids_i
		mov r14, r13
		cmp r14, 0
		jl IDX_OOB_139
		cmp r14, 7
		jg IDX_OOB_139
		jmp IDX_OK_138
	IDX_OOB_139:
		exit 1
	IDX_OK_138:
		mov r13, update_asteroids_i
		load arg0, ast, r13, 72
		mov _tmpptr34, arg0
		store r9, _tmpptr34, 32, 8
		jmp ENDIF_131
	ELSE_130:
	ENDIF_131:
		mov r9, update_asteroids_i
		mov r13, r9
		cmp r13, 0
		jl IDX_OOB_143
		cmp r13, 7
		jg IDX_OOB_143
		jmp IDX_OK_142
	IDX_OOB_143:
		exit 1
	IDX_OK_142:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr35, arg0
		load r9, _tmpptr35, 0, 8
		mov r10, r9
		cmp r10, 0
		jl CMP_TRUE_144
		mov r15, 0
		jmp CMP_END_145
	CMP_TRUE_144:
		mov r15, 1
	CMP_END_145:
		cmp r15, 0
		je ELSE_140
		mov r9, update_asteroids_i
		mov r10, r9
		cmp r10, 0
		jl IDX_OOB_147
		cmp r10, 7
		jg IDX_OOB_147
		jmp IDX_OK_146
	IDX_OOB_147:
		exit 1
	IDX_OK_146:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr36, arg0
		load r9, _tmpptr36, 0, 8
		add r9, 640
		mov r15, update_asteroids_i
		mov r11, r15
		cmp r11, 0
		jl IDX_OOB_149
		cmp r11, 7
		jg IDX_OOB_149
		jmp IDX_OK_148
	IDX_OOB_149:
		exit 1
	IDX_OK_148:
		mov r15, update_asteroids_i
		load arg0, ast, r15, 72
		mov _tmpptr37, arg0
		store r9, _tmpptr37, 0, 8
		jmp ENDIF_141
	ELSE_140:
	ENDIF_141:
		mov r9, update_asteroids_i
		mov r15, r9
		cmp r15, 0
		jl IDX_OOB_153
		cmp r15, 7
		jg IDX_OOB_153
		jmp IDX_OK_152
	IDX_OOB_153:
		exit 1
	IDX_OK_152:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr38, arg0
		load r9, _tmpptr38, 0, 8
		mov r13, r9
		cmp r13, 640
		jge CMP_TRUE_154
		mov r12, 0
		jmp CMP_END_155
	CMP_TRUE_154:
		mov r12, 1
	CMP_END_155:
		cmp r12, 0
		je ELSE_150
		mov r9, update_asteroids_i
		mov r12, r9
		cmp r12, 0
		jl IDX_OOB_157
		cmp r12, 7
		jg IDX_OOB_157
		jmp IDX_OK_156
	IDX_OOB_157:
		exit 1
	IDX_OK_156:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr39, arg0
		load r9, _tmpptr39, 0, 8
		sub r9, 640
		mov r13, update_asteroids_i
		mov r14, r13
		cmp r14, 0
		jl IDX_OOB_159
		cmp r14, 7
		jg IDX_OOB_159
		jmp IDX_OK_158
	IDX_OOB_159:
		exit 1
	IDX_OK_158:
		mov r13, update_asteroids_i
		load arg0, ast, r13, 72
		mov _tmpptr40, arg0
		store r9, _tmpptr40, 0, 8
		jmp ENDIF_151
	ELSE_150:
	ENDIF_151:
		mov r9, update_asteroids_i
		mov r13, r9
		cmp r13, 0
		jl IDX_OOB_163
		cmp r13, 7
		jg IDX_OOB_163
		jmp IDX_OK_162
	IDX_OOB_163:
		exit 1
	IDX_OK_162:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr41, arg0
		load r9, _tmpptr41, 0, 8
		mov r10, r9
		cmp r10, 0
		jl CMP_TRUE_164
		mov r15, 0
		jmp CMP_END_165
	CMP_TRUE_164:
		mov r15, 1
	CMP_END_165:
		cmp r15, 0
		je ELSE_160
		mov r9, update_asteroids_i
		mov r10, r9
		cmp r10, 0
		jl IDX_OOB_167
		cmp r10, 7
		jg IDX_OOB_167
		jmp IDX_OK_166
	IDX_OOB_167:
		exit 1
	IDX_OK_166:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr42, arg0
		load r9, _tmpptr42, 0, 8
		add r9, 360
		mov r15, update_asteroids_i
		mov r11, r15
		cmp r11, 0
		jl IDX_OOB_169
		cmp r11, 7
		jg IDX_OOB_169
		jmp IDX_OK_168
	IDX_OOB_169:
		exit 1
	IDX_OK_168:
		mov r15, update_asteroids_i
		load arg0, ast, r15, 72
		mov _tmpptr43, arg0
		store r9, _tmpptr43, 8, 8
		jmp ENDIF_161
	ELSE_160:
	ENDIF_161:
		mov r9, update_asteroids_i
		mov r15, r9
		cmp r15, 0
		jl IDX_OOB_173
		cmp r15, 7
		jg IDX_OOB_173
		jmp IDX_OK_172
	IDX_OOB_173:
		exit 1
	IDX_OK_172:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr44, arg0
		load r9, _tmpptr44, 0, 8
		mov r13, r9
		cmp r13, 360
		jge CMP_TRUE_174
		mov r12, 0
		jmp CMP_END_175
	CMP_TRUE_174:
		mov r12, 1
	CMP_END_175:
		cmp r12, 0
		je ELSE_170
		mov r9, update_asteroids_i
		mov r12, r9
		cmp r12, 0
		jl IDX_OOB_177
		cmp r12, 7
		jg IDX_OOB_177
		jmp IDX_OK_176
	IDX_OOB_177:
		exit 1
	IDX_OK_176:
		mov r9, update_asteroids_i
		load arg0, ast, r9, 72
		mov _tmpptr45, arg0
		load r9, _tmpptr45, 0, 8
		sub r9, 360
		mov r13, update_asteroids_i
		mov r14, r13
		cmp r14, 0
		jl IDX_OOB_179
		cmp r14, 7
		jg IDX_OOB_179
		jmp IDX_OK_178
	IDX_OOB_179:
		exit 1
	IDX_OK_178:
		mov r13, update_asteroids_i
		load arg0, ast, r13, 72
		mov _tmpptr46, arg0
		store r9, _tmpptr46, 8, 8
		jmp ENDIF_171
	ELSE_170:
	ENDIF_171:
		add update_asteroids_i, 1
		jmp FOR_100
	ENDFOR_101:
	PROC_END_update_asteroids:
		ret
	function PROC_check_collisions:
		mov check_collisions_i, 0
	FOR_180:
		mov rbx, 7
		cmp check_collisions_i, rbx
		jg ENDFOR_181
		load xmm0, ship_pos, 0, 8
		load xmm1, ship_pos, 8, 8
		mov rcx, check_collisions_i
		mov rdx, rcx
		cmp rdx, 0
		jl IDX_OOB_185
		cmp rdx, 7
		jg IDX_OOB_185
		jmp IDX_OK_184
	IDX_OOB_185:
		exit 1
	IDX_OK_184:
		mov rsi, check_collisions_i
		load arg0, ast, rsi, 72
		mov _tmpptr47, arg0
		load rsi, _tmpptr47, 0, 8
		mov rbx, rsi
		mov rdi, check_collisions_i
		mov r8, rdi
		cmp r8, 0
		jl IDX_OOB_187
		cmp r8, 7
		jg IDX_OOB_187
		jmp IDX_OK_186
	IDX_OOB_187:
		exit 1
	IDX_OK_186:
		mov r9, check_collisions_i
		load arg0, ast, r9, 72
		mov _tmpptr48, arg0
		load r9, _tmpptr48, 0, 8
		mov rcx, r9
		call FUNC_dist2
		mov xmm2, xmm0
		mov r9, check_collisions_i
		mov r10, r9
		cmp r10, 0
		jl IDX_OOB_189
		cmp r10, 7
		jg IDX_OOB_189
		jmp IDX_OK_188
	IDX_OOB_189:
		exit 1
	IDX_OK_188:
		mov r9, check_collisions_i
		load arg0, ast, r9, 72
		mov _tmpptr49, arg0
		load r9, _tmpptr49, 0, 8
		mov r11, check_collisions_i
		mov r12, r11
		cmp r12, 0
		jl IDX_OOB_191
		cmp r12, 7
		jg IDX_OOB_191
		jmp IDX_OK_190
	IDX_OOB_191:
		exit 1
	IDX_OK_190:
		mov r11, check_collisions_i
		load arg0, ast, r11, 72
		mov _tmpptr50, arg0
		load r11, _tmpptr50, 0, 8
		mul r9, r11
		mov r13, xmm2
		mov r14, r9
		cmp r13, r14
		jl CMP_TRUE_192
		mov r11, 0
		jmp CMP_END_193
	CMP_TRUE_192:
		mov r11, 1
	CMP_END_193:
		cmp r11, 0
		je ELSE_182
		mov r9, lives
		sub r9, 1
		mov lives, r9
		store real_const_6, ship_pos, 0, 8
		store real_const_7, ship_pos, 8, 8
		mov xmm3, real_const_0
		to_int r9, xmm3
		store r9, ship_vel, 0, 8
		mov xmm4, real_const_0
		to_int r9, xmm4
		store r9, ship_vel, 8, 8
		mov xmm5, real_const_8
		mov r9, 0
		sub r9, xmm5
		to_float xmm6, r9
		mov ship_angle, xmm6
		jmp PROC_END_check_collisions
		jmp ENDIF_183
	ELSE_182:
	ENDIF_183:
		add check_collisions_i, 1
		jmp FOR_180
	ENDFOR_181:
	PROC_END_check_collisions:
		ret
	function PROC_render:
		invoke set_render_target, renderer, target_id
		invoke set_draw_color, renderer, 0, 0, 0, 255
		invoke clear, renderer
		invoke set_draw_color, renderer, 255, 255, 255, 255
		call PROC_draw_ship
		mov render_i, 0
	FOR_194:
		mov rbx, 7
		cmp render_i, rbx
		jg ENDFOR_195
		mov rbx, render_i
		call PROC_draw_asteroid
		add render_i, 1
		jmp FOR_194
	ENDFOR_195:
		invoke inttostr, lives
		return _tmpptr51
		invoke strlen, str_2
		return rcx
		invoke strlen, _tmpptr51
		return rdx
		mov rsi, rcx
		add rsi, rdx
		add rsi, 1
		alloc _tmpptr52, 1, rsi
		invoke strncpy, _tmpptr52, str_2, rcx
		invoke strncat, _tmpptr52, _tmpptr51, rdx
		invoke draw_text, renderer, font_id, _tmpptr52, 8, 8, 255, 255, 255, 255
		invoke inttostr, score
		return _tmpptr53
		invoke strlen, str_3
		return rcx
		invoke strlen, _tmpptr53
		return rdx
		mov rsi, rcx
		add rsi, rdx
		add rsi, 1
		alloc _tmpptr54, 1, rsi
		invoke strncpy, _tmpptr54, str_3, rcx
		invoke strncat, _tmpptr54, _tmpptr53, rdx
		invoke draw_text, renderer, font_id, _tmpptr54, 520, 8, 255, 255, 255, 255
	PROC_END_render:
		ret
	function PROC_init:
		mov init_title, arg0
		mov init_xval, rbx
		mov init_yval, rcx
		mov init_wval, rdx
		mov init_hval, rsi
		invoke init
		return rbx
		mov init_result, rbx
		cmp init_result, 0
		jne CMP_TRUE_198
		mov rcx, 0
		jmp CMP_END_199
	CMP_TRUE_198:
		mov rcx, 1
	CMP_END_199:
		cmp rcx, 0
		je ELSE_196
		print fmt_str, str_4
		print newline
		exit 1
		jmp ENDIF_197
	ELSE_196:
	ENDIF_197:
		invoke create_window, title, init_xval, init_yval, init_wval, init_hval, 4
		return rdx
		mov window_id, rdx
		mov rsi, 0
		sub rsi, 1
		mov r8, rsi
		cmp window_id, r8
		je CMP_TRUE_202
		mov rdi, 0
		jmp CMP_END_203
	CMP_TRUE_202:
		mov rdi, 1
	CMP_END_203:
		cmp rdi, 0
		je ELSE_200
		print fmt_str, str_5
		print newline
		invoke quit
		exit 1
		jmp ENDIF_201
	ELSE_200:
	ENDIF_201:
		mov r8, 0
		sub r8, 1
		invoke create_renderer, window_id, r8, 2
		return r9
		mov renderer, r9
		mov r8, 0
		sub r8, 1
		mov r10, r8
		cmp renderer, r10
		je CMP_TRUE_206
		mov r9, 0
		jmp CMP_END_207
	CMP_TRUE_206:
		mov r9, 1
	CMP_END_207:
		cmp r9, 0
		je ELSE_204
		print fmt_str, str_6
		print newline
		invoke destroy_window, window_id
		invoke quit
		exit 1
		jmp ENDIF_205
	ELSE_204:
	ENDIF_205:
		invoke create_render_target, renderer, 640, 360
		return r9
		mov target_id, r9
		mov r9, 0
		sub r9, 1
		mov r11, r9
		cmp target_id, r11
		je CMP_TRUE_210
		mov r10, 0
		jmp CMP_END_211
	CMP_TRUE_210:
		mov r10, 1
	CMP_END_211:
		cmp r10, 0
		je ELSE_208
		print fmt_str, str_7
		print newline
		invoke destroy_renderer, renderer
		invoke destroy_window, window_id
		invoke quit
		exit 1
		jmp ENDIF_209
	ELSE_208:
	ENDIF_209:
		invoke init_text
		return r9
		mov r11, r9
		cmp r11, 1
		jne CMP_TRUE_214
		mov r10, 0
		jmp CMP_END_215
	CMP_TRUE_214:
		mov r10, 1
	CMP_END_215:
		cmp r10, 0
		je ELSE_212
		print fmt_str, str_8
		print newline
		exit 1
		jmp ENDIF_213
	ELSE_212:
	ENDIF_213:
		invoke load_font, filename, 16
		return r9
		mov font_id, r9
		mov r9, 0
		sub r9, 1
		mov r11, r9
		cmp font_id, r11
		je CMP_TRUE_218
		mov r10, 0
		jmp CMP_END_219
	CMP_TRUE_218:
		mov r10, 1
	CMP_END_219:
		cmp r10, 0
		je ELSE_216
		print fmt_str, str_9
		print fmt_str, filename
		print newline
		exit 1
		jmp ENDIF_217
	ELSE_216:
	ENDIF_217:
		call PROC_reset_game
	PROC_END_init:
		ret
	function PROC_cleanup:
		invoke destroy_render_target, target_id
		invoke destroy_renderer, renderer
		invoke destroy_window, window_id
		invoke quit_text
		invoke quit
	PROC_END_cleanup:
		ret
	function FUNC_frand:
		mov frand_a, xmm0
		mov frand_b, xmm1
		mov rbx, frand_b
		sub rbx, frand_a
		invoke rand
		return rcx
		mov rdx, rcx
		mod rdx, 1000
		mov rsi, rbx
		mul rsi, rdx
		mov xmm0, real_const_15
		mov rdi, rsi
		div rdi, xmm0
		mov r8, frand_a
		add r8, rdi
		mov xmm0, r8
	FUNC_END_frand:
		ret
	function FUNC_mix:
		mov mix_seed, rbx
		mov mix_idx, rcx
		mov rbx, mix_seed
		mul rbx, 1103515245
		mov rcx, rbx
		add rcx, 12345
		mov rdx, mix_idx
		mul rdx, 196314165
		mov rsi, rcx
		add rsi, rdx
		mov rdi, rsi
		mod rdi, 2147483647
		mov mix_v, rdi
		cmp mix_v, 0
		jl CMP_TRUE_222
		mov r8, 0
		jmp CMP_END_223
	CMP_TRUE_222:
		mov r8, 1
	CMP_END_223:
		cmp r8, 0
		je ELSE_220
		mov r9, 0
		sub r9, mix_v
		mov mix_v, r9
		jmp ENDIF_221
	ELSE_220:
	ENDIF_221:
		mov rax, mix_v
	FUNC_END_mix:
		ret
	function FUNC_jagged_scale:
		mov jagged_scale_seed, rbx
		mov jagged_scale_idx, rcx
		mov rbx, jagged_scale_seed
		mov rcx, jagged_scale_idx
		call FUNC_mix
		mov rbx, rax
		mov jagged_scale_h, rbx
		mov rcx, jagged_scale_h
		mod rcx, 1000
		mov xmm0, real_const_15
		mov rdx, rcx
		div rdx, xmm0
		mov jagged_scale_t, rdx
		mov xmm1, real_const_16
		mov rsi, jagged_scale_t
		mul rsi, real_const_17
		add xmm1, rsi
		mov xmm0, xmm1
	FUNC_END_jagged_scale:
		ret
	function FUNC_dist2:
		mov dist2_ax, xmm0
		mov dist2_ay, xmm1
		mov dist2_bx, xmm2
		mov dist2_by, xmm3
		mov rbx, dist2_ax
		sub rbx, dist2_bx
		mov dist2_dx, rbx
		mov rcx, dist2_ay
		sub rcx, dist2_by
		mov dist2_dy, rcx
		mov rdx, dist2_dx
		mul rdx, dist2_dx
		mov rsi, dist2_dy
		mul rsi, dist2_dy
		mov rdi, rdx
		add rdi, rsi
		mov xmm0, rdi
	FUNC_END_dist2:
		ret
	}
}

