program AppSkeleton {
	section module {
 		sdl,
		std,
		string
	}
	section data {
		int rax = 0
		int rbx = 0
		int rcx = 0
		int rdx = 0
		int rsi = 0
		int rdi = 0
		int r8 = 0
		int r9 = 0
		int r10 = 0
		int r11 = 0
		int r12 = 0
		int r13 = 0
		ptr _tmpptr0 = null
		ptr _tmpptr1 = null
		ptr arg0 = null
		ptr arg1 = null
		string str_0 = "Pong"
		string str_1 = "font.ttf"
		string str_2 = "Score: "
		string str_3 = "failed to init SDL"
		string str_4 = "Could not create window"
		string str_5 = "could not create renderer"
		string str_6 = "could not create render target"
		string str_7 = "Font subsystem failed to load"
		string str_8 = "failed to open: "
		string fmt_str = "%s "
		string newline = "\n"
		ptr title = null
		ptr filename = null
		int running = 0
		int event_type_result = 0
		int window_id = 0
		int renderer = 0
		int target_id = 0
		int font_id = 0
		int key = 0
		ptr paddle1 = null
		ptr paddle2 = null
		ptr ball = null
		int ball_dx = 0
		int ball_dy = 0
		int score_l = 0
		int score_r = 0
		int draw_box_px = 0
		int draw_box_py = 0
		int draw_box_pw = 0
		int draw_box_ph = 0
		int reset_ball_to_right = 0
		ptr clamp_paddle_p = null
		int update_ai_center_ball = 0
		int update_ai_center_p2 = 0
		int render_center_line_yy = 0
		ptr init_title = null
		int init_xval = 0
		int init_yval = 0
		int init_wval = 0
		int init_hval = 0
		int init_result = 0
		int aabb_ax = 0
		int aabb_ay = 0
		int aabb_aw = 0
		int aabb_ah = 0
		int aabb_bx = 0
		int aabb_by = 0
		int aabb_bw = 0
		int aabb_bh = 0
	}
	section code {
	start:
		mov title, str_0
		mov filename, str_1
		alloc paddle1, 8, 16
		alloc paddle2, 8, 16
		alloc ball, 8, 16
		mov arg0, title
		mov rbx, 100
		mov rcx, 100
		mov rdx, 1280
		mov rsi, 720
		call PROC_init
		mov rbx, 1
		mov running, rbx
	WHILE_0:
		mov rcx, 1
		mov rsi, rcx
		cmp running, rsi
		je CMP_TRUE_2
		mov rdx, 0
		jmp CMP_END_3
	CMP_TRUE_2:
		mov rdx, 1
	CMP_END_3:
		cmp rdx, 0
		je ENDWHILE_1
	WHILE_4:
		invoke poll_event
		return rsi
		mov r8, rsi
		cmp r8, 0
		jne CMP_TRUE_6
		mov rdi, 0
		jmp CMP_END_7
	CMP_TRUE_6:
		mov rdi, 1
	CMP_END_7:
		cmp rdi, 0
		je ENDWHILE_5
		invoke get_event_type
		return r8
		mov event_type_result, r8
		cmp event_type_result, 256
		je CMP_TRUE_10
		mov r9, 0
		jmp CMP_END_11
	CMP_TRUE_10:
		mov r9, 1
	CMP_END_11:
		cmp r9, 0
		je ELSE_8
		mov r9, 0
		mov running, r9
		jmp ENDIF_9
	ELSE_8:
	ENDIF_9:
		cmp event_type_result, 768
		je CMP_TRUE_14
		mov r9, 0
		jmp CMP_END_15
	CMP_TRUE_14:
		mov r9, 1
	CMP_END_15:
		cmp r9, 0
		je ELSE_12
		invoke get_key_code
		return r9
		mov key, r9
		cmp key, 27
		je CMP_TRUE_18
		mov r9, 0
		jmp CMP_END_19
	CMP_TRUE_18:
		mov r9, 1
	CMP_END_19:
		cmp r9, 0
		je ELSE_16
		mov r9, 0
		mov running, r9
		jmp ENDIF_17
	ELSE_16:
	ENDIF_17:
		jmp ENDIF_13
	ELSE_12:
	ENDIF_13:
		jmp WHILE_4
	ENDWHILE_5:
		call PROC_update_input
		call PROC_update_ai
		call PROC_update_ball
		call PROC_render
		invoke present_scaled, renderer, target_id, 1280, 720
		invoke delay, 16
		jmp WHILE_0
	ENDWHILE_1:
		call PROC_cleanup
		free paddle1
		free paddle2
		free ball
		done
	function PROC_draw_box:
		mov draw_box_px, rbx
		mov draw_box_py, rcx
		mov draw_box_pw, rdx
		mov draw_box_ph, rsi
		invoke fill_rect, renderer, draw_box_px, draw_box_py, draw_box_pw, draw_box_ph
		ret
	function PROC_reset_ball:
		mov reset_ball_to_right, rbx
		store 317, ball, 0, 8
		store 177, ball, 8, 8
		mov rbx, 1
		mov rdx, rbx
		cmp reset_ball_to_right, rdx
		je CMP_TRUE_22
		mov rcx, 0
		jmp CMP_END_23
	CMP_TRUE_22:
		mov rcx, 1
	CMP_END_23:
		cmp rcx, 0
		je ELSE_20
		mov ball_dx, 4
		jmp ENDIF_21
	ELSE_20:
		mov rdx, 0
		sub rdx, 4
		mov ball_dx, rdx
	ENDIF_21:
		invoke get_ticks
		return rsi
		mov rdi, rsi
		mod rdi, 2
		mov r9, rdi
		cmp r9, 0
		je CMP_TRUE_26
		mov r8, 0
		jmp CMP_END_27
	CMP_TRUE_26:
		mov r8, 1
	CMP_END_27:
		cmp r8, 0
		je ELSE_24
		mov ball_dy, 4
		jmp ENDIF_25
	ELSE_24:
		mov r9, 0
		sub r9, 4
		mov ball_dy, r9
	ENDIF_25:
		ret
	function PROC_clamp_paddle:
		mov clamp_paddle_p, arg0
		load rbx, clamp_paddle_p, 8, 8
		mov rdx, rbx
		cmp rdx, 0
		jl CMP_TRUE_30
		mov rcx, 0
		jmp CMP_END_31
	CMP_TRUE_30:
		mov rcx, 1
	CMP_END_31:
		cmp rcx, 0
		je ELSE_28
		store 0, clamp_paddle_p, 8, 8
		jmp ENDIF_29
	ELSE_28:
	ENDIF_29:
		load rdx, clamp_paddle_p, 8, 8
		mov rsi, rdx
		add rsi, 56
		mov r8, rsi
		cmp r8, 360
		jg CMP_TRUE_34
		mov rdi, 0
		jmp CMP_END_35
	CMP_TRUE_34:
		mov rdi, 1
	CMP_END_35:
		cmp rdi, 0
		je ELSE_32
		store 304, clamp_paddle_p, 8, 8
		jmp ENDIF_33
	ELSE_32:
	ENDIF_33:
		ret
	function PROC_update_input:
		invoke is_key_pressed, 82
		return rbx
		mov rdx, rbx
		cmp rdx, 0
		jne CMP_TRUE_38
		mov rcx, 0
		jmp CMP_END_39
	CMP_TRUE_38:
		mov rcx, 1
	CMP_END_39:
		cmp rcx, 0
		je ELSE_36
		load rdx, paddle1, 8, 8
		mov rsi, rdx
		sub rsi, 4
		store rsi, paddle1, 8, 8
		jmp ENDIF_37
	ELSE_36:
	ENDIF_37:
		invoke is_key_pressed, 81
		return rdi
		mov r9, rdi
		cmp r9, 0
		jne CMP_TRUE_42
		mov r8, 0
		jmp CMP_END_43
	CMP_TRUE_42:
		mov r8, 1
	CMP_END_43:
		cmp r8, 0
		je ELSE_40
		load r9, paddle1, 8, 8
		add r9, 4
		store r9, paddle1, 8, 8
		jmp ENDIF_41
	ELSE_40:
	ENDIF_41:
		mov arg0, paddle1
		call PROC_clamp_paddle
		ret
	function PROC_update_ai:
		load rbx, ball, 8, 8
		mov rcx, rbx
		add rcx, 3
		mov update_ai_center_ball, rcx
		load rdx, paddle2, 8, 8
		mov rsi, rdx
		add rsi, 28
		mov update_ai_center_p2, rsi
		mov rdi, update_ai_center_p2
		sub rdi, 4
		mov r9, rdi
		cmp update_ai_center_ball, r9
		jl CMP_TRUE_46
		mov r8, 0
		jmp CMP_END_47
	CMP_TRUE_46:
		mov r8, 1
	CMP_END_47:
		cmp r8, 0
		je ELSE_44
		load r9, paddle2, 8, 8
		sub r9, 4
		store r9, paddle2, 8, 8
		jmp ENDIF_45
	ELSE_44:
		mov r9, update_ai_center_p2
		add r9, 4
		mov r11, r9
		cmp update_ai_center_ball, r11
		jg CMP_TRUE_50
		mov r10, 0
		jmp CMP_END_51
	CMP_TRUE_50:
		mov r10, 1
	CMP_END_51:
		cmp r10, 0
		je ELSE_48
		load r9, paddle2, 8, 8
		add r9, 4
		store r9, paddle2, 8, 8
		jmp ENDIF_49
	ELSE_48:
	ENDIF_49:
	ENDIF_45:
		mov arg0, paddle2
		call PROC_clamp_paddle
		ret
	function PROC_update_ball:
		load rbx, ball, 0, 8
		mov rcx, rbx
		add rcx, ball_dx
		store rcx, ball, 0, 8
		load rdx, ball, 8, 8
		mov rsi, rdx
		add rsi, ball_dy
		store rsi, ball, 8, 8
		load rdi, ball, 8, 8
		mov r9, rdi
		cmp r9, 0
		jle CMP_TRUE_54
		mov r8, 0
		jmp CMP_END_55
	CMP_TRUE_54:
		mov r8, 1
	CMP_END_55:
		cmp r8, 0
		je ELSE_52
		store 0, ball, 8, 8
		mov r9, 0
		sub r9, ball_dy
		mov ball_dy, r9
		jmp ENDIF_53
	ELSE_52:
	ENDIF_53:
		load r9, ball, 8, 8
		add r9, 6
		mov r11, r9
		cmp r11, 360
		jge CMP_TRUE_58
		mov r10, 0
		jmp CMP_END_59
	CMP_TRUE_58:
		mov r10, 1
	CMP_END_59:
		cmp r10, 0
		je ELSE_56
		store 354, ball, 8, 8
		mov r9, 0
		sub r9, ball_dy
		mov ball_dy, r9
		jmp ENDIF_57
	ELSE_56:
	ENDIF_57:
		load r9, ball, 0, 8
		mov rbx, r9
		load r10, ball, 8, 8
		mov rcx, r10
		mov rdx, 6
		mov rsi, 6
		load r11, paddle1, 0, 8
		mov rdi, r11
		load r12, paddle1, 8, 8
		mov r8, r12
		mov r9, 6
		mov r10, 56
		call FUNC_aabb
		mov r13, rax
		cmp r13, 0
		je ELSE_60
		load r9, paddle1, 0, 8
		add r9, 6
		store r9, ball, 0, 8
		mov r9, 0
		sub r9, ball_dx
		mov ball_dx, r9
		jmp ENDIF_61
	ELSE_60:
	ENDIF_61:
		load r9, ball, 0, 8
		mov rbx, r9
		load r10, ball, 8, 8
		mov rcx, r10
		mov rdx, 6
		mov rsi, 6
		load r11, paddle2, 0, 8
		mov rdi, r11
		load r12, paddle2, 8, 8
		mov r8, r12
		mov r9, 6
		mov r10, 56
		call FUNC_aabb
		mov r13, rax
		cmp r13, 0
		je ELSE_62
		load r9, paddle2, 0, 8
		sub r9, 6
		store r9, ball, 0, 8
		mov r9, 0
		sub r9, ball_dx
		mov ball_dx, r9
		jmp ENDIF_63
	ELSE_62:
	ENDIF_63:
		load r9, ball, 0, 8
		add r9, 6
		mov r11, r9
		cmp r11, 0
		jl CMP_TRUE_66
		mov r10, 0
		jmp CMP_END_67
	CMP_TRUE_66:
		mov r10, 1
	CMP_END_67:
		cmp r10, 0
		je ELSE_64
		mov r9, score_r
		add r9, 1
		mov score_r, r9
		mov r9, 1
		mov rbx, r9
		call PROC_reset_ball
		jmp ENDIF_65
	ELSE_64:
	ENDIF_65:
		load r9, ball, 0, 8
		mov r11, r9
		cmp r11, 640
		jg CMP_TRUE_70
		mov r10, 0
		jmp CMP_END_71
	CMP_TRUE_70:
		mov r10, 1
	CMP_END_71:
		cmp r10, 0
		je ELSE_68
		mov r9, score_l
		add r9, 1
		mov score_l, r9
		mov r9, 0
		mov rbx, r9
		call PROC_reset_ball
		jmp ENDIF_69
	ELSE_68:
	ENDIF_69:
		ret
	function PROC_render_center_line:
		mov render_center_line_yy, 0
	WHILE_72:
		cmp render_center_line_yy, 360
		jl CMP_TRUE_74
		mov rbx, 0
		jmp CMP_END_75
	CMP_TRUE_74:
		mov rbx, 1
	CMP_END_75:
		cmp rbx, 0
		je ENDWHILE_73
		mov rbx, 319
		mov rcx, render_center_line_yy
		mov rdx, 2
		mov rsi, 8
		call PROC_draw_box
		mov rcx, render_center_line_yy
		add rcx, 16
		mov render_center_line_yy, rcx
		jmp WHILE_72
	ENDWHILE_73:
		ret
	function PROC_render:
		invoke set_render_target, renderer, target_id
		invoke set_draw_color, renderer, 0, 0, 0, 255
		invoke clear, renderer
		invoke set_draw_color, renderer, 255, 255, 255, 255
		call PROC_render_center_line
		load rbx, paddle1, 0, 8
		load rcx, paddle1, 8, 8
		mov rdx, 6
		mov rsi, 56
		call PROC_draw_box
		load rdx, paddle2, 0, 8
		mov rbx, rdx
		load rsi, paddle2, 8, 8
		mov rcx, rsi
		mov rdx, 6
		mov rsi, 56
		call PROC_draw_box
		load rdi, ball, 0, 8
		mov rbx, rdi
		load r8, ball, 8, 8
		mov rcx, r8
		mov rdx, 6
		mov rsi, 6
		call PROC_draw_box
		invoke inttostr, score_l
		return arg0
		invoke strlen, str_2
		return r9
		invoke strlen, arg0
		return r10
		mov r11, r9
		add r11, r10
		add r11, 1
		alloc _tmpptr0, 1, r11
		invoke strncpy, _tmpptr0, str_2, r9
		invoke strncat, _tmpptr0, arg0, r10
		invoke draw_text, renderer, font_id, _tmpptr0, 220, 8, 255, 255, 255, 255
		invoke inttostr, score_r
		return arg1
		invoke strlen, str_2
		return r9
		invoke strlen, arg1
		return r10
		mov r11, r9
		add r11, r10
		add r11, 1
		alloc _tmpptr1, 1, r11
		invoke strncpy, _tmpptr1, str_2, r9
		invoke strncat, _tmpptr1, arg1, r10
		invoke draw_text, renderer, font_id, _tmpptr1, 340, 8, 255, 255, 255, 255
		free arg0
		free _tmpptr0
		free arg1
		free _tmpptr1
		ret
	function PROC_init:
		mov init_title, arg0
		mov init_xval, rbx
		mov init_yval, rcx
		mov init_wval, rdx
		mov init_hval, rsi
		invoke init
		return rbx
		mov init_result, rbx
		cmp init_result, 0
		jne CMP_TRUE_78
		mov rcx, 0
		jmp CMP_END_79
	CMP_TRUE_78:
		mov rcx, 1
	CMP_END_79:
		cmp rcx, 0
		je ELSE_76
		print fmt_str, str_3
		print newline
		exit 1
		jmp ENDIF_77
	ELSE_76:
	ENDIF_77:
		invoke create_window, title, init_xval, init_yval, init_wval, init_hval, 4
		return rdx
		mov window_id, rdx
		mov rsi, 0
		sub rsi, 1
		mov r8, rsi
		cmp window_id, r8
		je CMP_TRUE_82
		mov rdi, 0
		jmp CMP_END_83
	CMP_TRUE_82:
		mov rdi, 1
	CMP_END_83:
		cmp rdi, 0
		je ELSE_80
		print fmt_str, str_4
		print newline
		invoke quit
		exit 1
		jmp ENDIF_81
	ELSE_80:
	ENDIF_81:
		mov r8, 0
		sub r8, 1
		invoke create_renderer, window_id, r8, 2
		return r9
		mov renderer, r9
		mov r8, 0
		sub r8, 1
		mov r10, r8
		cmp renderer, r10
		je CMP_TRUE_86
		mov r9, 0
		jmp CMP_END_87
	CMP_TRUE_86:
		mov r9, 1
	CMP_END_87:
		cmp r9, 0
		je ELSE_84
		print fmt_str, str_5
		print newline
		invoke destroy_window, window_id
		invoke quit
		exit 1
		jmp ENDIF_85
	ELSE_84:
	ENDIF_85:
		invoke create_render_target, renderer, 640, 360
		return r9
		mov target_id, r9
		mov r9, 0
		sub r9, 1
		mov r11, r9
		cmp target_id, r11
		je CMP_TRUE_90
		mov r10, 0
		jmp CMP_END_91
	CMP_TRUE_90:
		mov r10, 1
	CMP_END_91:
		cmp r10, 0
		je ELSE_88
		print fmt_str, str_6
		print newline
		invoke destroy_renderer, renderer
		invoke destroy_window, window_id
		invoke quit
		exit 1
		jmp ENDIF_89
	ELSE_88:
	ENDIF_89:
		invoke init_text
		return r9
		mov r11, r9
		cmp r11, 1
		jne CMP_TRUE_94
		mov r10, 0
		jmp CMP_END_95
	CMP_TRUE_94:
		mov r10, 1
	CMP_END_95:
		cmp r10, 0
		je ELSE_92
		print fmt_str, str_7
		print newline
		exit 1
		jmp ENDIF_93
	ELSE_92:
	ENDIF_93:
		invoke load_font, filename, 16
		return r9
		mov font_id, r9
		mov r9, 0
		sub r9, 1
		mov r11, r9
		cmp font_id, r11
		je CMP_TRUE_98
		mov r10, 0
		jmp CMP_END_99
	CMP_TRUE_98:
		mov r10, 1
	CMP_END_99:
		cmp r10, 0
		je ELSE_96
		print fmt_str, str_8
		print fmt_str, filename
		print newline
		exit 1
		jmp ENDIF_97
	ELSE_96:
	ENDIF_97:
		store 16, paddle1, 0, 8
		store 152, paddle1, 8, 8
		store 618, paddle2, 0, 8
		store 152, paddle2, 8, 8
		mov r9, 1
		mov rbx, r9
		call PROC_reset_ball
		mov score_l, 0
		mov score_r, 0
		ret
	function PROC_cleanup:
		invoke destroy_render_target, target_id
		invoke destroy_renderer, renderer
		invoke destroy_window, window_id
		invoke quit_text
		invoke quit
		ret
	function FUNC_aabb:
		mov aabb_ax, rbx
		mov aabb_ay, rcx
		mov aabb_aw, rdx
		mov aabb_ah, rsi
		mov aabb_bx, rdi
		mov aabb_by, r8
		mov aabb_bw, r9
		mov aabb_bh, r10
		mov rbx, aabb_ax
		add rbx, aabb_aw
		mov rdx, rbx
		cmp rdx, aabb_bx
		jle CMP_TRUE_100
		mov rcx, 0
		jmp CMP_END_101
	CMP_TRUE_100:
		mov rcx, 1
	CMP_END_101:
		mov rdx, aabb_bx
		add rdx, aabb_bw
		mov rdi, rdx
		cmp rdi, aabb_ax
		jle CMP_TRUE_102
		mov rsi, 0
		jmp CMP_END_103
	CMP_TRUE_102:
		mov rsi, 1
	CMP_END_103:
		cmp rcx, 0
		jne OR_ONE_104
		cmp rsi, 0
		jne OR_ONE_104
		mov rdi, 0
		jmp OR_END_105
	OR_ONE_104:
		mov rdi, 1
	OR_END_105:
		mov r8, aabb_ay
		add r8, aabb_ah
		mov r10, r8
		cmp r10, aabb_by
		jle CMP_TRUE_106
		mov r9, 0
		jmp CMP_END_107
	CMP_TRUE_106:
		mov r9, 1
	CMP_END_107:
		cmp rdi, 0
		jne OR_ONE_108
		cmp r9, 0
		jne OR_ONE_108
		mov r10, 0
		jmp OR_END_109
	OR_ONE_108:
		mov r10, 1
	OR_END_109:
		mov r9, aabb_by
		add r9, aabb_bh
		mov r12, r9
		cmp r12, aabb_ay
		jle CMP_TRUE_110
		mov r11, 0
		jmp CMP_END_111
	CMP_TRUE_110:
		mov r11, 1
	CMP_END_111:
		cmp r10, 0
		jne OR_ONE_112
		cmp r11, 0
		jne OR_ONE_112
		mov r9, 0
		jmp OR_END_113
	OR_ONE_112:
		mov r9, 1
	OR_END_113:
		not r9
		mov rax, r9
		ret
	}
}

